<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shaoxiang博客</title>
  
  <subtitle>我的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yangshaoxiang.github.io/"/>
  <updated>2019-04-26T06:31:44.520Z</updated>
  <id>https://yangshaoxiang.github.io/</id>
  
  <author>
    <name>yangshaoxiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ELK与Elasticsearch集群部署</title>
    <link href="https://yangshaoxiang.github.io/2018/07/12/elk%E4%B8%8Ees%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <id>https://yangshaoxiang.github.io/2018/07/12/elk与es集群部署/</id>
    <published>2018-07-11T16:05:08.000Z</published>
    <updated>2019-04-26T06:31:44.520Z</updated>
    
    <content type="html"><![CDATA[<h3 id="elk简述"><a href="#elk简述" class="headerlink" title="elk简述"></a>elk简述</h3><h4 id="传统日志管理问题"><a href="#传统日志管理问题" class="headerlink" title="传统日志管理问题"></a>传统日志管理问题</h4><p>在项目初期的时候，大家都是赶着上线，一般来说对日志没有过多的考虑，当然日志量也不大，所以用log4j就够了，随着应用的越来越多，日志散落在各个服务器的logs文件夹下，确实有点不大方便  </p><p>当我们需要日志分析的时候你大概会这么做：直接在日志文件中 grep、awk 就可以获得自己想要的信息<br><a id="more"></a><br>但是这样的方式有很多问题:  </p><ol><li><p>日志量太大如何归档、文本搜索太慢怎么办、如何多维度查询  </p></li><li><p>应用太多，面临数十上百台应用时你该怎么办  </p></li><li><p>随意登录服务器查询log对系统的稳定性及安全性肯定有影响  </p></li><li><p>如果使用人员对Linux不太熟练那面对庞大的日志无从下手  </p></li></ol><h4 id="elk简介"><a href="#elk简介" class="headerlink" title="elk简介"></a>elk简介</h4><p>ELK是三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana , 它们都是开源软件  </p><ol><li><p>ElasticSearch<br>这是一个基于Lucene的分布式全文搜索框架，可以对logs进行分布式存储，有点像hdfs。此为ELK的核心组件，日志的分析以及存储全部由es完成  </p></li><li><p>LogStash<br>  它可以流放到各自的服务器上收集Log日志，通过内置的ElasticSearch插件解析后输出到ES中  </p></li><li><p>Kibana<br>它可以多维度的展示es中的数据。这也解决了用mysql存储带来了难以可视化的问题。他提供了丰富的UI组件，简化了使用难度  </p></li></ol><h4 id="elk作用"><a href="#elk作用" class="headerlink" title="elk作用"></a>elk作用</h4><ol><li><p>日志统一收集，管理，访问。查找问题方便安全  </p></li><li><p>使用简单，可以大大提高定位问题的效率  </p></li><li><p>可以对收集起来的log进行分析  </p></li><li><p>能够提供错误报告，监控机制  </p></li></ol><h4 id="elk架构选择"><a href="#elk架构选择" class="headerlink" title="elk架构选择"></a>elk架构选择</h4><p>一般使用普通架构即可  </p><h5 id="普通架构"><a href="#普通架构" class="headerlink" title="普通架构"></a>普通架构</h5><ol><li><p>ElasticSearch：核心 提供查询，全文检索</p></li><li><p>Kibana：页面展示，及方便查询</p></li><li><p>Logstash：收集日志 主要有过滤功能，格式化，和其他个性化需求  </p></li></ol><p>使用场景:<br>能解决50G以下的log，这个50g指的是es里面的总量–此时一般es所在的机器配置是8G，es比较吃cpu内存</p><h5 id="高级架构"><a href="#高级架构" class="headerlink" title="高级架构"></a>高级架构</h5><ol><li><p>ElasticSearch：核心 提供查询，全文检索</p></li><li><p>Kibana：页面展示，及方便查询</p></li><li><p>FileBeat ：轻量级收集日志系统，速度快，稳定不占资源</p></li><li><p>Redis：缓冲，防止把es搞垮了，和kafka二者取其一</p></li><li><p>Kafka：消息中间件，可缓存大数据量，日志一般存半个月</p></li></ol><p>使用场景:<br>适用于一天产生几十g日志<br>推荐算法模型–》元数据来源于log，redis和kafka还有优势是做推荐的时候，可以即分发给es也分发给推荐算法</p><h3 id="elk部署"><a href="#elk部署" class="headerlink" title="elk部署"></a>elk部署</h3><p>下载地址:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://www.elastic.co/cn/products</div></pre></td></tr></table></figure></p><p>本次安装的版本信息:<br>JDK1.8<br>elasticsearch-5.6.4<br>logstash-5.6.3<br>kibana-5.2.0</p><h4 id="elasticSearch部署"><a href="#elasticSearch部署" class="headerlink" title="elasticSearch部署"></a>elasticSearch部署</h4><p>下载的包传到服务器上解压后</p><h5 id="修改es的配置"><a href="#修改es的配置" class="headerlink" title="修改es的配置"></a>修改es的配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd elasticsearch-5.6.4/config/</div><div class="line">vi elasticsearch.yml</div></pre></td></tr></table></figure><p>要修改的内容如下<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 集群名称 配置集群使用-非集群不配</span></div><div class="line"><span class="comment">#cluster.name: my-application</span></div><div class="line"><span class="comment"># 这个节点的名称</span></div><div class="line"><span class="string">node.name:</span> <span class="string">node-1</span></div><div class="line"><span class="comment"># 数据存放目录-注意启动elasticsearch的用户必须有该目录的读写权限</span></div><div class="line"><span class="string">path.data:</span> <span class="string">/tmp/elasticsearch/data</span></div><div class="line"><span class="comment"># 日志存放目录-注意启动elasticsearch的用户必须有该目录的读写权限</span></div><div class="line"><span class="string">path.logs:</span> <span class="string">/tmp/elasticsearch/logs</span></div><div class="line"><span class="comment"># Lock the memory on startup:</span></div><div class="line"><span class="string">bootstrap.memory_lock:</span> <span class="literal">false</span></div><div class="line"><span class="comment"># 解决启动异常：ERROR: bootstrap checks failed</span></div><div class="line"><span class="string">bootstrap.system_call_filter:</span> <span class="literal">false</span></div><div class="line"><span class="comment"># 允许访问的ip 0.0.0.0表示允许所有</span></div><div class="line"><span class="string">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></div><div class="line"><span class="comment"># 允许外部访问的http端口</span></div><div class="line"><span class="string">http.port:</span> <span class="number">9200</span></div><div class="line"><span class="comment"># 安装elastic-head插件需要-作用是跨域</span></div><div class="line"><span class="string">http.cors.enabled:</span> <span class="literal">true</span></div><div class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">"*"</span></div></pre></td></tr></table></figure></p><h5 id="修改linux配置"><a href="#修改linux配置" class="headerlink" title="修改linux配置"></a>修改linux配置</h5><p>elasticSearch不允许root用户启动，新建用户用于启动elasticSearch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 创建elasticsearch用户</div><div class="line">groupadd elasticsearch</div><div class="line">useradd elasticsearch -g elasticsearch -p 123456</div><div class="line"># 赋权限</div><div class="line">chown elasticsearch:elasticsearch -R /app/elasticsearch-5.6.4</div></pre></td></tr></table></figure></p><p>es5.0后修改limit限制,不修改启动会报错<br>max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vi /etc/security/limits.conf</div><div class="line"># 下面的elasticsearch是上面创建的elasticsearch用户名称</div><div class="line"># 格式: username hard nofile 65536</div><div class="line">elasticsearch hard nofile 65536</div><div class="line">elasticsearch soft nofile 65536</div></pre></td></tr></table></figure></p><p>解决max number of threads [1024] for user [apps] is too low, increase to at least [2048] 报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vi /etc/security/limits.d/90-nproc.conf</div><div class="line">修改  </div><div class="line">* soft nproc 1024</div><div class="line">为  </div><div class="line">* soft nproc 2048</div></pre></td></tr></table></figure></p><p>解决max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo &apos;vm.max_map_count=262144&apos;&gt;&gt; /etc/sysctl.conf</div><div class="line">sysctl -p</div></pre></td></tr></table></figure></p><h5 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h5><p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#切换到elasticsearch用户</div><div class="line">su elasticsearch</div><div class="line">./elasticsearch-5.6.4/bin/elasticsearch</div></pre></td></tr></table></figure></p><p>开放端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vi  /etc/sysconfig/iptables</div><div class="line"># 在打开的文件中加入如下内容</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 9200 -j ACCEPT</div><div class="line"># 重启防火墙</div><div class="line">service iptables restart</div></pre></td></tr></table></figure></p><p>浏览器访问测试:  </p><p><a href="http://es所在机器ip:9200/" target="_blank" rel="external">http://es所在机器ip:9200/</a><br>出现一串包含版本信息的json即为安装成功</p><h4 id="logstash部署"><a href="#logstash部署" class="headerlink" title="logstash部署"></a>logstash部署</h4><p>解压，在config目录建：logstash.conf，输入以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi logstash.conf</div></pre></td></tr></table></figure></p><p>配置包含input ，filter，output三大块<br>其中input是吸取logs文件下的所有log后缀的日志文件<br>filter是一个过滤函数，配置则可进行个性化过滤<br>output配置了导入到hosts为127.0.0.1:9200的elasticsearch中，每天一个索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">     file &#123;</div><div class="line">        type =&gt; &quot;log&quot;</div><div class="line">        path =&gt;  &quot;/logs/*.log&quot;</div><div class="line">        start_position =&gt; &quot;beginning&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">  stdout &#123;</div><div class="line">   codec =&gt; rubydebug &#123; &#125;</div><div class="line">  &#125;</div><div class="line">  elasticsearch &#123;</div><div class="line">    hosts =&gt; &quot;127.0.0.1&quot;</div><div class="line">    index =&gt; &quot;log-%&#123;+YYYY.MM.dd&#125;&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>start_position：<br>是监听的位置，默认是end，即一个文件如果没有记录它的读取信息，则从文件的末尾开始读取，也就是说，仅仅读取新添加的内容。对于一些更新的日志类型的监听，通常直接使用end就可以了；相反，beginning就会从一个文件的头开始读取。但是如果记录过文件的读取信息，则不会从最开始读取。重启读取信息不会丢失  </p><p>bin目录下启动logstash了，配置文件设置为config/logstash.conf<br>启动命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./logstash -f ../config/logstash.conf</div></pre></td></tr></table></figure></p><p>配置不同的logpath<br>在config目录下建立多个.conf文件，每个文件指定不同path<br>指定启动目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./logstash -f ../config</div></pre></td></tr></table></figure></p><h4 id="kibana部署"><a href="#kibana部署" class="headerlink" title="kibana部署"></a>kibana部署</h4><p>这个安装比较简单，解压后在kibana.yml文件中指定一下你需要读取的elasticSearch地址和可供外网访问的bind地址就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi kibana-5.2.0-linux-x86_64/config/kibana.yml</div></pre></td></tr></table></figure></p><p>修改内容如下:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">server.host:</span> <span class="string">"0.0.0.0"</span></div><div class="line"><span class="comment"># 如果是集群则配置master节点</span></div><div class="line"><span class="string">elasticsearch.url:</span> <span class="attr">http://localhost:9200</span></div></pre></td></tr></table></figure></p><p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/kibana</div></pre></td></tr></table></figure></p><p>开放端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vi  /etc/sysconfig/iptables</div><div class="line"># 在打开的文件中加入如下内容</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 5601 -j ACCEPT</div><div class="line"># 重启防火墙</div><div class="line">service iptables restart</div></pre></td></tr></table></figure></p><p>浏览器访问测试:<br><a href="http://kibana所在机器ip:5601/" target="_blank" rel="external">http://kibana所在机器ip:5601/</a>  </p><p>创建索引:  </p><p>进入之后，在左侧栏菜单最后一项，创建索引，进入时没有创建按钮<br>我们在本机的/logs文件夹下创建一个简单的1.log文件，内容为“hello world”，然后在kibana上将logstash-<em>  改成 log</em> ，Create按钮就会自动出来</p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180710/d0C30G7jLc.png?imageslim" alt="mark"></p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><h4 id="elastic-head插件"><a href="#elastic-head插件" class="headerlink" title="elastic-head插件"></a>elastic-head插件</h4><p>下载<br><a href="https://github.com/mobz/elasticsearch-head/archive/master.zip" target="_blank" rel="external">https://github.com/mobz/elasticsearch-head/archive/master.zip</a>  </p><p>解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">unzip elasticsearch-head-master.zip</div><div class="line">#没有zip命令的可以安装一下</div><div class="line">#yum install -y unzip zip</div></pre></td></tr></table></figure></p><p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl --silent --location https://rpm.nodesource.com/setup | bash -</div></pre></td></tr></table></figure></p><p>如果没安装nodejs的话需要安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y nodejs</div></pre></td></tr></table></figure></p><p>如果node.js版本过低，则需要升级<br>升级node.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 第一步：首先安装 n 模块：</div><div class="line">npm install -g n</div><div class="line"># 第二步：升级node.js到最新稳定版</div><div class="line">n stable</div></pre></td></tr></table></figure></p><p>修改配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd elasticsearch-head-master  </div><div class="line">npm install grunt --save-dev  </div><div class="line"># 如果失败升级下node</div><div class="line">npm install</div><div class="line">vi Gruntfile.js</div></pre></td></tr></table></figure></p><p>在connect节点下 增加hostname属性，设置为* 注意加,号  </p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180710/CCh0E7kmKH.png?imageslim" alt="mark"></p><p>修改head链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi elasticsearch-head-master/_site/app.js</div></pre></td></tr></table></figure></p><p>将<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.base_uri = <span class="keyword">this</span>.config.base_uri || <span class="keyword">this</span>.prefs.get(<span class="string">"app-base_uri"</span>) || <span class="string">"http://localhost:9200"</span>;</div></pre></td></tr></table></figure></p><p>把localhost修改成自己es的服务器地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.base_uri = this.config.base_uri || this.prefs.get(&quot;app-base_uri&quot;) || &quot;http://192.168.x.x:9200&quot;;</div></pre></td></tr></table></figure></p><p>如果之前没在es的配置文件中配置以下内容的话，配置下（我上面es已经配置）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http.cors.enabled: true</div><div class="line">http.cors.allow-origin: &quot;*&quot;</div></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd elasticsearch-head-master/node_modules/grunt/bin</div><div class="line">./grunt server &amp;</div></pre></td></tr></table></figure></p><p>开放端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vi  /etc/sysconfig/iptables</div><div class="line"># 在打开的文件中加入如下内容</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 9100 -j ACCEPT</div><div class="line"># 重启防火墙</div><div class="line">service iptables restart</div></pre></td></tr></table></figure></p><p>浏览器访问测试:<br><a href="http://插件所在服务器ip:9100" target="_blank" rel="external">http://插件所在服务器ip:9100</a></p><h4 id="elasticSearch集群部署"><a href="#elasticSearch集群部署" class="headerlink" title="elasticSearch集群部署"></a>elasticSearch集群部署</h4><p>以上配置完成后，elk已经可以正常使用，这里在记录下es集群的部署，这里在一台机器上部署集群，上面已经部署好的es为主节点，其 <code>elasticsearch.yml</code> 的配置内容如下:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-----------------cluster集群新加配置------------------</span></div><div class="line"><span class="comment"># 集群名称 注意一个集群里面的机器一定要保持一致</span></div><div class="line"><span class="string">cluster.name:</span> <span class="string">"my-es-cluster"</span></div><div class="line"><span class="comment"># 尽量配置机器差作为主节点 注意只有两个节点的话第二个请配置为false</span></div><div class="line"><span class="string">node.master:</span> <span class="literal">true</span></div><div class="line"><span class="string">node.data:</span> <span class="literal">true</span></div><div class="line"><span class="string">http.enabled:</span> <span class="literal">true</span></div><div class="line"><span class="string">transport.tcp.port:</span> <span class="number">9300</span></div><div class="line"><span class="comment"># 单播(unicast)协议，指定要发现的节点信息了，可以不指定端口[默认9300]</span></div><div class="line"><span class="string">discovery.zen.ping.unicast.hosts:</span> <span class="string">["192.168.112.50","192.168.112.50:8300"]</span></div><div class="line"><span class="comment">#默认是1看到的具有master节点资格的最小数量，然后才能在集群中做操作。官方的推荐值是(N/2)+1，如果只有2个节点设为1</span></div><div class="line"><span class="string">discovery.zen.minimum_master_nodes:</span> <span class="number">1</span></div><div class="line"><span class="comment"># ping的超时时间，如果网络差则延长</span></div><div class="line"><span class="comment"># discovery.zen.ping.timeout: 60s</span></div><div class="line"><span class="comment"># 设置集群中自动发现其他节点时ping连接的超时时间</span></div><div class="line"><span class="comment"># discovery.zen.ping.timeout: 180s</span></div><div class="line"></div><div class="line"><span class="comment">#-------------cluster集群在单机基础上可能要修改配置------------------</span></div><div class="line"><span class="comment"># 这个节点的名称 同一个集群里面的名字不能相同</span></div><div class="line"><span class="string">node.name:</span> <span class="string">node-1</span></div><div class="line"><span class="comment"># 数据存放目录-注意启动elasticsearch的用户必须有该目录的权限</span></div><div class="line"><span class="string">path.data:</span> <span class="string">/tmp/elasticsearch/data</span></div><div class="line"><span class="comment"># 日志存放目录-注意启动elasticsearch的用户必须有该目录的权限</span></div><div class="line"><span class="string">path.logs:</span> <span class="string">/tmp/elasticsearch/logs</span></div><div class="line"><span class="comment"># 允许外部访问的端口</span></div><div class="line"><span class="string">http.port:</span> <span class="number">9200</span></div><div class="line"></div><div class="line"><span class="comment">#-----------------单机和集群不变的配置------------------</span></div><div class="line"><span class="string">bootstrap.memory_lock:</span> <span class="literal">false</span></div><div class="line"><span class="comment"># 解决启动异常：ERROR: bootstrap checks failed</span></div><div class="line"><span class="string">bootstrap.system_call_filter:</span> <span class="literal">false</span></div><div class="line"><span class="comment"># 允许访问的ip 0.0.0.0表示允许所有</span></div><div class="line"><span class="string">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></div><div class="line"><span class="comment"># head插件跨域</span></div><div class="line"><span class="string">http.cors.enabled:</span> <span class="literal">true</span></div><div class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">"*"</span></div></pre></td></tr></table></figure></p><p>复制一份主节点的es或重新解压一份es，修改其 <code>elasticsearch.yml</code> 的配置内容如下:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-----------------cluster集群新加配置------------------</span></div><div class="line"><span class="comment"># 集群名称 注意一个集群里面的机器一定要保持一致</span></div><div class="line"><span class="string">cluster.name:</span> <span class="string">"my-es-cluster"</span></div><div class="line"><span class="comment"># 尽量配置机器差作为主节点 注意只有两个节点的话第二个请配置为false</span></div><div class="line"><span class="string">node.master:</span> <span class="literal">false</span></div><div class="line"><span class="string">node.data:</span> <span class="literal">true</span></div><div class="line"><span class="string">http.enabled:</span> <span class="literal">true</span></div><div class="line"><span class="string">transport.tcp.port:</span> <span class="number">8300</span></div><div class="line"><span class="comment"># 单播(unicast)协议，指定要发现的节点信息了，可以不指定端口[默认9300]</span></div><div class="line"><span class="string">discovery.zen.ping.unicast.hosts:</span> <span class="string">["192.168.112.50","192.168.112.50:8300"]</span></div><div class="line"><span class="comment">#默认是1看到的具有master节点资格的最小数量，然后才能在集群中做操作。官方的推荐值是(N/2)+1，如果只有2个节点设为1</span></div><div class="line"><span class="string">discovery.zen.minimum_master_nodes:</span> <span class="number">1</span></div><div class="line"><span class="comment"># ping的超时时间，如果网络差则延长</span></div><div class="line"><span class="comment"># discovery.zen.ping.timeout: 60s</span></div><div class="line"><span class="comment"># 设置集群中自动发现其他节点时ping连接的超时时间</span></div><div class="line"><span class="comment"># discovery.zen.ping.timeout: 180s</span></div><div class="line"></div><div class="line"><span class="comment">#-------------cluster集群在单机基础上可能要修改配置------------------</span></div><div class="line"><span class="comment"># 这个节点的名称 同一个集群里面的名字不能相同</span></div><div class="line"><span class="string">node.name:</span> <span class="string">node-2</span></div><div class="line"><span class="comment"># 数据存放目录-注意启动elasticsearch的用户必须有该目录的权限</span></div><div class="line"><span class="string">path.data:</span> <span class="string">/tmp/elasticsearch/data-node2</span></div><div class="line"><span class="comment"># 日志存放目录-注意启动elasticsearch的用户必须有该目录的权限</span></div><div class="line"><span class="string">path.logs:</span> <span class="string">/tmp/elasticsearch/logs-node2</span></div><div class="line"><span class="comment"># 允许外部访问的端口</span></div><div class="line"><span class="string">http.port:</span> <span class="number">8200</span></div><div class="line"></div><div class="line"><span class="comment">#-----------------单机和集群不变的配置------------------</span></div><div class="line"><span class="string">bootstrap.memory_lock:</span> <span class="literal">false</span></div><div class="line"><span class="comment"># 解决启动异常：ERROR: bootstrap checks failed</span></div><div class="line"><span class="string">bootstrap.system_call_filter:</span> <span class="literal">false</span></div><div class="line"><span class="comment"># 允许访问的ip 0.0.0.0表示允许所有</span></div><div class="line"><span class="string">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></div><div class="line"><span class="comment"># head插件跨域</span></div><div class="line"><span class="string">http.cors.enabled:</span> <span class="literal">true</span></div><div class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">"*"</span></div></pre></td></tr></table></figure></p><p>如果一台机器内存不够，可以修改es的内存配置，例如这里可以将master内存改小一点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd config</div><div class="line">vi jvm.options</div></pre></td></tr></table></figure></p><p>将2G改为1G<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-Xms1g</div><div class="line">-Xmx1g</div></pre></td></tr></table></figure></p><p>为了方便查看我将上面es的文件夹做了重命名，因此给elasticsearch重新授权<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chown elasticsearch:elasticsearch -R /app/elasticsearch-node1</div><div class="line">chown elasticsearch:elasticsearch -R /app/elasticsearch-node2</div></pre></td></tr></table></figure></p><p>添加公作节点使用的外部端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vi  /etc/sysconfig/iptables</div><div class="line"># 在打开的文件中加入如下内容</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8200 -j ACCEPT</div><div class="line"># 重启防火墙</div><div class="line">service iptables restart</div></pre></td></tr></table></figure></p><p>启动工作节点，在启动master节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">su elasticsearch</div><div class="line"># 分别切换到两个es的安装目录，启动</div><div class="line">./bin/elasticsearch</div></pre></td></tr></table></figure></p><p>成功启动后控制台打印</p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180711/IEG14bC7k9.png?imageslim" alt="mark"></p><p>启动head插件，在浏览器访问</p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180711/20Jh52JmjJ.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;elk简述&quot;&gt;&lt;a href=&quot;#elk简述&quot; class=&quot;headerlink&quot; title=&quot;elk简述&quot;&gt;&lt;/a&gt;elk简述&lt;/h3&gt;&lt;h4 id=&quot;传统日志管理问题&quot;&gt;&lt;a href=&quot;#传统日志管理问题&quot; class=&quot;headerlink&quot; title=&quot;传统日志管理问题&quot;&gt;&lt;/a&gt;传统日志管理问题&lt;/h4&gt;&lt;p&gt;在项目初期的时候，大家都是赶着上线，一般来说对日志没有过多的考虑，当然日志量也不大，所以用log4j就够了，随着应用的越来越多，日志散落在各个服务器的logs文件夹下，确实有点不大方便  &lt;/p&gt;
&lt;p&gt;当我们需要日志分析的时候你大概会这么做：直接在日志文件中 grep、awk 就可以获得自己想要的信息&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangshaoxiang.github.io/categories/java/"/>
    
    
      <category term="ELK" scheme="https://yangshaoxiang.github.io/tags/ELK/"/>
    
      <category term="Elasticsearch" scheme="https://yangshaoxiang.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>APM(4)javassist结合javaagent使用</title>
    <link href="https://yangshaoxiang.github.io/2018/03/15/APM(4)javassist%E7%BB%93%E5%90%88javaagent%E4%BD%BF%E7%94%A8/"/>
    <id>https://yangshaoxiang.github.io/2018/03/15/APM(4)javassist结合javaagent使用/</id>
    <published>2018-03-15T12:31:26.000Z</published>
    <updated>2018-03-20T12:49:16.418Z</updated>
    
    <content type="html"><![CDATA[<p>javaagnet为插桩提供入口，javassist实现字节码修改，这部分将记录3个demo，分别是静态agent结合javassist修改方法体，动态agent结合javassist修改方法体，最后一个demo综合使用javaagent和javassist监听c3p0数据源<br><a id="more"></a></p><h4 id="静态agent修改方法"><a href="#静态agent修改方法" class="headerlink" title="静态agent修改方法"></a>静态agent修改方法</h4><ol><li><p>编写一个用于被篡改的类Calculate，示例代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculate</span> </span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">    * 输入什么数字就返回什么数字</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> a 输入的数字</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> 输入的数字</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">       <span class="keyword">return</span> a;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>编写ClassTransform的实现类和静态agent类，配置pom文件(参考 <a href="https://yangshaoxiang.github.io/2018/03/07/APM(1)%E9%9D%99%E6%80%81javaagent%E4%BD%BF%E7%94%A8/#more" title="静态javaagent使用">APM1</a> ),该类在Calculate类进行装载时会篡改他的字，使得他的getResult()方法返回输入数值的双倍，完毕后记得打包，示例代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.transformer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javassist.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</div><div class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</div><div class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstAhentTransformer</span>  <span class="keyword">implements</span> <span class="title">ClassFileTransformer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</div><div class="line">        String modifyClassName1 = <span class="string">"com/pojo/Calculate"</span>;<span class="comment">//要修改的类</span></div><div class="line">        String modifyClassName = <span class="string">"com.pojo.Calculate"</span>;<span class="comment">//要修改的类</span></div><div class="line">        <span class="keyword">if</span>(modifyClassName1.equals(className))&#123;</div><div class="line">            ClassPool pool = <span class="keyword">new</span> ClassPool();</div><div class="line">            LoaderClassPath loaderClassPath = <span class="keyword">new</span> LoaderClassPath(loader);</div><div class="line">            pool.insertClassPath(loaderClassPath);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                CtClass ctClass = pool.get(modifyClassName);</div><div class="line">                CtMethod resultMethod = ctClass.getDeclaredMethod(<span class="string">"getResult"</span>);</div><div class="line">                <span class="comment">//添加一行a = 2*a;，如果成功该方法返回值应该是2a</span></div><div class="line">                resultMethod.insertBefore(<span class="string">"$1 = 2*$1;"</span>);</div><div class="line">                <span class="keyword">return</span> ctClass.toBytecode();</div><div class="line">            &#125; <span class="keyword">catch</span> (NotFoundException e) &#123;</div><div class="line">                System.out.println(<span class="string">"类没找到"</span>);</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (CannotCompileException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//返回一个null表示，仍然装载之前的class，agent并没有对类进行修改</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.agenttest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javassist.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</div><div class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</div><div class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</div><div class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstAgent</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> arg agentArgs 是 premain 函数得到的程序参数，随同 “– javaagent”一起传入。</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> instrumentation instrumentation 是一个 java.lang.instrument.Instrumentation 的实例，由 JVM 自动传入</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String arg, Instrumentation instrumentation)</span></span>&#123;</div><div class="line">      System.out.println(<span class="string">"这里执行了premain()方法，进行了装载"</span>);</div><div class="line">      instrumentation.addTransformer(<span class="keyword">new</span> FirstAhentTransformer());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li><p>启动方法，测试，注意添加javagent的jvm启动参数，示例代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.pojo.Calculate;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstAgentMain</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"main方法中的输出"</span>);</div><div class="line">            <span class="keyword">int</span> result = Calculate.getResult(<span class="number">100</span>);</div><div class="line">            System.out.println(<span class="string">"输入100获取到的值是:"</span>+result);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>结果输出及结论:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这里执行了premain()方法，进行了装载</div><div class="line">main方法中的输出</div><div class="line">输入100获取到的值是:200</div></pre></td></tr></table></figure></li></ol><p>在main方法调用Calculate类时，Calculate进行加载，加载过程中被agent类修改了字节码实现，agent类中，instrumentation.addTransformer()方法中返回修改后的字节码，若该方法返回值不为空，则虚拟机会加载该方法返回的字节码，若为空则使用原来的字节码，这里在该方法中使用javassist修改了Calculate类的getResult方法，因此当main方法中执行Calculate.getResult()方法时，此时加载的Calculate类是修改后的，因此正常输出100现在是200，其实这也相当于对Calculate类进行了代理</p><h4 id="动态agent修改方法"><a href="#动态agent修改方法" class="headerlink" title="动态agent修改方法"></a>动态agent修改方法</h4><ol><li><p>编写被篡改的类Calculate，该类代码和上面相同，这里不在重复编写</p></li><li><p>ClassTransform的实现类同上，动态agent类示例代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicAgent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String arg, Instrumentation instrumentation)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"这里执行了agentmain()方法，进行了装载"</span>);</div><div class="line">        instrumentation.addTransformer(<span class="keyword">new</span> FirstAhentTransformer(),<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            instrumentation.retransformClasses(Calculate.class);</div><div class="line">        &#125; <span class="keyword">catch</span> (UnmodifiableClassException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li><li><p>添加pom相关依赖，打成jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">archive</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></div><div class="line">                         <span class="tag">&lt;<span class="name">Project-name</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">Project-name</span>&gt;</span></div><div class="line">                         <span class="tag">&lt;<span class="name">Project-version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">Project-version</span>&gt;</span></div><div class="line">                         <span class="tag">&lt;<span class="name">Premain-Class</span>&gt;</span>com.agenttest.FirstAgent<span class="tag">&lt;/<span class="name">Premain-Class</span>&gt;</span></div><div class="line">                         <span class="tag">&lt;<span class="name">Boot-Class-Path</span>&gt;</span>javassist-3.18.1-GA.jar<span class="tag">&lt;/<span class="name">Boot-Class-Path</span>&gt;</span></div><div class="line">                         <span class="tag">&lt;<span class="name">Agent-Class</span>&gt;</span>com.agenttest.DynamicAgent<span class="tag">&lt;/<span class="name">Agent-Class</span>&gt;</span></div><div class="line">                         <span class="tag">&lt;<span class="name">Can-Redefine-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Redefine-Classes</span>&gt;</span></div><div class="line">                         <span class="tag">&lt;<span class="name">Can-Retransform-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Retransform-Classes</span>&gt;</span></div><div class="line">                         <span class="comment">&lt;!--&lt;Main-Class&gt;com.test.DynamicAgentJarTest&lt;/Main-Class&gt;--&gt;</span></div><div class="line">                     <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></div><div class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure></li></ol><p>注意这里相比于 <a href="https://yangshaoxiang.github.io/2018/03/09/APM(2)%E5%8A%A8%E6%80%81javaagent%E4%BD%BF%E7%94%A8/" title="动态javaagent使用">APM2</a> 多了两个标签,其含义可以参考<a href="https://yq.aliyun.com/articles/2946?spm=5176.100239.yqblog1.45" target="_blank" rel="external">JVM源码分析之javaagent原理完全解读</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Can-Redefine-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Redefine-Classes</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Can-Retransform-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Retransform-Classes</span>&gt;</span></div></pre></td></tr></table></figure></p><ol><li><p>编写虚拟机监听器<br>之所以写这个是因为动态atach时不这样做就需要jvm的进程ID，这样就不需要在代码里手动的去改JVN的进程ID了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.agenttest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</div><div class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VirtualMachineListener</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;VirtualMachineDescriptor&gt; listBefore;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String jar;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VirtualMachineListener</span><span class="params">(String attachJar, List&lt;VirtualMachineDescriptor&gt; vms)</span> </span>&#123;</div><div class="line">        listBefore = vms;  <span class="comment">// 记录程序启动时的 VM 集合</span></div><div class="line">        jar = attachJar;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        VirtualMachine vm = <span class="keyword">null</span>;</div><div class="line">        List&lt;VirtualMachineDescriptor&gt; listAfter = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                listAfter = VirtualMachine.list();</div><div class="line">                <span class="keyword">for</span> (VirtualMachineDescriptor vmd : listAfter) &#123;</div><div class="line">                    <span class="keyword">if</span> (!listBefore.contains(vmd)) &#123;</div><div class="line">                        <span class="comment">// 如果 VM 有增加，我们就认为是被监控的 VM 启动了</span></div><div class="line">                        <span class="comment">// 这时，我们开始监控这个 VM</span></div><div class="line">                        listBefore.add(vmd);</div><div class="line">                        vm = VirtualMachine.attach(vmd);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                Thread.sleep(<span class="number">500</span>);</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != vm ) &#123;</div><div class="line">                    System.out.println(<span class="string">"已监控到目标虚拟机--执行动态atach"</span>);</div><div class="line">                    vm.loadAgent(jar);</div><div class="line">                    vm.detach();</div><div class="line">                    System.out.println(<span class="string">"已监控到目标虚拟机--结束监听"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>两个启动测试方法<br>启动虚拟机的监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.agenttest.VirtualMachineListener;</div><div class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicAgentTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception </span>&#123;</div><div class="line">        <span class="comment">//动态Agent所在项目打包的jar包</span></div><div class="line">            String jarPath = System.getProperty(<span class="string">"user.dir"</span>) + <span class="string">"/javaagentTestagent/target/javaagentTest-agent-1.0-SNAPSHOT.jar"</span>;</div><div class="line">            System.out.println(<span class="string">"------&gt;"</span>+jarPath);</div><div class="line">            <span class="comment">//启动虚拟机监听器</span></div><div class="line">            <span class="keyword">new</span> VirtualMachineListener(jarPath ,VirtualMachine.list()).start();</div><div class="line">            System.out.println(<span class="string">"atach已启动。。。。"</span>);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>启动测试项目<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstAgentMain</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"main方法中的输出"</span>);</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">200</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">int</span> result = Calculate.getResult(<span class="number">100</span>);</div><div class="line">                System.out.println(<span class="string">"输入值是100，当前获得的结果是:"</span>+result);</div><div class="line">                <span class="keyword">if</span>(result == <span class="number">200</span>)&#123;</div><div class="line">                    System.out.println(<span class="string">"结束循环说明类已被动态修改"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ol><li><p>结果输出及结论<br>先启动虚拟机监听器，一直监听JVM的启动，之后项目启动，调用getResult可以看到控制台先打印100，监听器监听到项目启动，动态atach到这个JVM上修改getResult()方法后，控制台打印200  </p><p> 监听器的打印:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">------&gt;C:\软件\代码\smproject\javaagentTest/javaagentTestagent/target/javaagentTest-agent-1.0-SNAPSHOT.jar</div><div class="line">atach已启动。。。。</div><div class="line">##下面的打印是在启动项目后，监听器监听到，然后打印的信息</div><div class="line">已监控到目标虚拟机--执行动态atach</div><div class="line">已监控到目标虚拟机--结束监听</div></pre></td></tr></table></figure><p> 项目的打印:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">main方法中的输出</div><div class="line">输入值是100，当前获得的结果是:100</div><div class="line">输入值是100，当前获得的结果是:100</div><div class="line">输入值是100，当前获得的结果是:100</div><div class="line">输入值是100，当前获得的结果是:100</div><div class="line">这里执行了agentmain()方法，进行了装载</div><div class="line">输入值是100，当前获得的结果是:100</div><div class="line">输入值是100，当前获得的结果是:200</div><div class="line">结束循环说明类已被动态修改</div></pre></td></tr></table></figure></li></ol><h4 id="监听c3p0数据源"><a href="#监听c3p0数据源" class="headerlink" title="监听c3p0数据源"></a>监听c3p0数据源</h4><p>本次插桩是在com.mchange.v2.c3p0.ComboPooledDataSource类的构造方法中插入System.getProperties().put(“c3p0Source$agent”, $0);<br>保存一个全局的ComboPooledDataSource对象，然后将该对象在页面中输出</p><ol><li>编写ClassTransform的实现类和静态agent类<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3p0Agent</span> <span class="keyword">implements</span> <span class="title">ClassFileTransformer</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> String targetClass = <span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">C3p0Agent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//打开http服务</span></div><div class="line">            openHttpServer();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取ComboPooledDataSource对象信息</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</div><div class="line">        Object source2 = System.getProperties().get(<span class="string">"c3p0Source$agent"</span>);</div><div class="line">        <span class="keyword">if</span> (source2 == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"未初始任何c3p0数据源"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> source2.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//开启http端口 http://localhost:5555/server</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openHttpServer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        InetSocketAddress addr = <span class="keyword">new</span> InetSocketAddress(<span class="number">5555</span>);</div><div class="line">        HttpServer server = HttpServer.create(addr, <span class="number">0</span>);</div><div class="line">        server.createContext(<span class="string">"/server"</span>, <span class="keyword">new</span> HttpHandler());</div><div class="line">        server.setExecutor(Executors.newCachedThreadPool());</div><div class="line">        server.start();</div><div class="line">        System.out.println(<span class="string">"Server is listening on port 5555"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 本次插桩是在com.mchange.v2.c3p0.ComboPooledDataSource类的构造方法中插入</span></div><div class="line"><span class="comment">     * System.getProperties().put("c3p0Source$agent", $0);</span></div><div class="line"><span class="comment">     * 保存一个全局的ComboPooledDataSource对象，然后将该对象在页面中输出</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</div><div class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (className != <span class="keyword">null</span> &amp;&amp; className.replace(<span class="string">"/"</span>, <span class="string">"."</span>).equals(targetClass)) &#123;</div><div class="line">            ClassPool pool = <span class="keyword">new</span> ClassPool();</div><div class="line">            pool.insertClassPath(<span class="keyword">new</span> LoaderClassPath(loader));</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                CtClass ctl = pool.get(targetClass);</div><div class="line">                <span class="comment">//获取构造方法 ()V无参构造</span></div><div class="line">                CtConstructor constructor = ctl.getConstructor(<span class="string">"()V"</span>);</div><div class="line">                <span class="comment">//$0 表示this</span></div><div class="line">                constructor.insertAfter(<span class="string">"System.getProperties().put(\"c3p0Source$agent\", $0);"</span>);</div><div class="line">                result = ctl.toBytecode();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpHandler</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">sun</span>.<span class="title">net</span>.<span class="title">httpserver</span>.<span class="title">HttpHandler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">            Headers responseHeaders = exchange.getResponseHeaders();</div><div class="line">            responseHeaders.set(<span class="string">"Content-Type"</span>, <span class="string">"text/plain;charset=UTF-8"</span>);</div><div class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, <span class="number">0</span>);</div><div class="line">            OutputStream responseBody = exchange.getResponseBody();</div><div class="line">            <span class="comment">// 输出c3p0状态</span></div><div class="line">            responseBody.write(C3p0Agent.<span class="keyword">this</span>.getStatus().getBytes());</div><div class="line">            responseBody.flush();</div><div class="line">            responseBody.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String args, Instrumentation inst)</span> </span>&#123;</div><div class="line">    System.out.println(String.format(<span class="string">"系统载入myAgent 参数%s 载入方法:premain"</span>, args));</div><div class="line">    System.out.println(<span class="string">"载入C3p0Agent"</span>);</div><div class="line">    inst.addTransformer(<span class="keyword">new</span> C3p0Agent());</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>编写测试demo</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3p0Demo</span> </span>&#123;</div><div class="line">    ComboPooledDataSource dataSource;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">C3p0Demo</span><span class="params">()</span></span>&#123;</div><div class="line">        dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">"mysql"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        Connection conn = dataSource.getConnection();</div><div class="line">        <span class="keyword">boolean</span> b = conn.createStatement().execute(sql);</div><div class="line">        conn.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        C3p0Demo s=<span class="keyword">new</span> C3p0Demo();</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">            <span class="keyword">int</span> size = System.in.read(bytes);</div><div class="line">            String sql = <span class="keyword">new</span> String(bytes, <span class="number">0</span>, size);</div><div class="line">            System.out.println(sql);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                s.exec(sql);</div><div class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>运行测试<br>注意agent类打包，添加pom配置等不在累述，resources下要有c3p0配置文件c3p0-config.xml，运行是添加jvm启动参数</li></ol><p>控制台输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">系统载入myAgent 参数null 载入方法:premain</div><div class="line">载入C3p0Agent</div><div class="line">Server is listening on port 5555</div><div class="line">三月 19, 2018 11:07:05 上午 com.mchange.v2.log.MLog &lt;clinit&gt;</div><div class="line">信息: MLog clients using java 1.4+ standard logging.</div><div class="line">三月 19, 2018 11:07:06 上午 com.mchange.v2.c3p0.C3P0Registry banner</div><div class="line">信息: Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]</div><div class="line">select * from user;</div><div class="line">select * from user;</div></pre></td></tr></table></figure></p><p>浏览器访问 <a href="http://localhost:5555/server" target="_blank" rel="external">http://localhost:5555/server</a> 页面内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -&gt; 3, acquireRetryAttempts -&gt; 30, acquireRetryDelay -&gt; 1000, autoCommitOnClose -&gt; false, automaticTestTable -&gt; null, breakAfterAcquireFailure -&gt; false, checkoutTimeout -&gt; 0, connectionCustomizerClassName -&gt; null, connectionTesterClassName -&gt; com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -&gt; mysql, debugUnreturnedConnectionStackTraces -&gt; false, description -&gt; null, driverClass -&gt; com.mysql.jdbc.Driver, factoryClassLocation -&gt; null, forceIgnoreUnresolvedTransactions -&gt; false, identityToken -&gt; 1hge41t9ugpkfsah1jv37|21934d9d, idleConnectionTestPeriod -&gt; 0, initialPoolSize -&gt; 10, jdbcUrl -&gt; jdbc:mysql://localhost:3306/springtest?useUnicode=true&amp;characterEncoding=UTF8, maxAdministrativeTaskTime -&gt; 0, maxConnectionAge -&gt; 0, maxIdleTime -&gt; 30, maxIdleTimeExcessConnections -&gt; 0, maxPoolSize -&gt; 100, maxStatements -&gt; 200, maxStatementsPerConnection -&gt; 0, minPoolSize -&gt; 10, numHelperThreads -&gt; 3, numThreadsAwaitingCheckoutDefaultUser -&gt; 0, preferredTestQuery -&gt; null, properties -&gt; &#123;user=******, password=******&#125;, propertyCycle -&gt; 0, testConnectionOnCheckin -&gt; false, testConnectionOnCheckout -&gt; false, unreturnedConnectionTimeout -&gt; 0, usesTraditionalReflectiveProxies -&gt; false ]</div></pre></td></tr></table></figure></p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="http://blog.csdn.net/wqlpz23045/article/details/72457886" target="_blank" rel="external">可能问题</a><br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html#artrelatedtopics" target="_blank" rel="external">Instrumentation 新功能</a><br><a href="https://yq.aliyun.com/articles/2946?spm=5176.100239.yqblog1.45" target="_blank" rel="external">JVM源码分析之javaagent原理完全解读</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javaagnet为插桩提供入口，javassist实现字节码修改，这部分将记录3个demo，分别是静态agent结合javassist修改方法体，动态agent结合javassist修改方法体，最后一个demo综合使用javaagent和javassist监听c3p0数据源&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangshaoxiang.github.io/categories/java/"/>
    
    
      <category term="APM" scheme="https://yangshaoxiang.github.io/tags/APM/"/>
    
      <category term="javaagent" scheme="https://yangshaoxiang.github.io/tags/javaagent/"/>
    
  </entry>
  
  <entry>
    <title>APM(3)javassist使用</title>
    <link href="https://yangshaoxiang.github.io/2018/03/11/APM(3)javassist%E4%BD%BF%E7%94%A8/"/>
    <id>https://yangshaoxiang.github.io/2018/03/11/APM(3)javassist使用/</id>
    <published>2018-03-11T12:31:26.000Z</published>
    <updated>2019-04-26T06:31:44.188Z</updated>
    
    <content type="html"><![CDATA[<p>通过前两节，了解了javaagent相关的知识，无论静态agent还是动态agent都可以在对应用无侵入的情况下实现对应用的监控(拦截)，那么我们拦截应用的执行有什么用呢？答案是可以实现应用的监控，对类字节码的修改，动态代理等等，如果要修改类字节码则需要一个工具，这个工具就是javassist<br>Javassist是一个开源的分析、编辑和创建Java字节码的类库。其主要的优点，在于简单，而且快速。直接使用java编码的形式，而不需要了解虚拟机指令，就能动态改变类的结构，或者动态生成<br><a id="more"></a></p><h4 id="javassist使用"><a href="#javassist使用" class="headerlink" title="javassist使用"></a>javassist使用</h4><p>关于javassist直接通过代码注释方式来理解，他的主要功能是可以动态构建一个新类，或者修改已经存在的类的相关属性(成员变量，构造方法，普通方法)，使用之前先引入相关jar包<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.20.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="动态创建类"><a href="#动态创建类" class="headerlink" title="动态创建类"></a>动态创建类</h4><p>下面是使用javassist创建一个类的实例相关api使用都已在代码中注释<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment"> * 使用javassist动态创建一个类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">makeClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">            ClassPool pool = ClassPool.getDefault();</div><div class="line">            <span class="comment">//定义类</span></div><div class="line">            CtClass stuClass = pool.makeClass(<span class="string">"com.pojo.Student"</span>);</div><div class="line"></div><div class="line">            <span class="comment">//创建成员变量--两种方式</span></div><div class="line">            <span class="comment">//id属性--通过构造方法定义</span></div><div class="line">            CtField idField = <span class="keyword">new</span> CtField(CtClass.longType, <span class="string">"id"</span>, stuClass);</div><div class="line">            idField.setModifiers(Modifier.PRIVATE);<span class="comment">//设置访问类型为私有</span></div><div class="line">            <span class="comment">//name属性--通过make方法类似写类那样定义</span></div><div class="line">            CtField nameField = CtField.make(<span class="string">"private String name;"</span>, stuClass);</div><div class="line">            stuClass.addField(idField);</div><div class="line">            stuClass.addField(nameField);</div><div class="line"></div><div class="line">            <span class="comment">//创建方法</span></div><div class="line">            CtMethod nameGetMethod = CtMethod.make(<span class="string">"public String getName()&#123;return name;&#125;"</span>, stuClass);</div><div class="line">            CtMethod nameSetMethod = CtMethod.make(<span class="string">"public void setName(String name)&#123;this.name = name;&#125;"</span>, stuClass);</div><div class="line">            stuClass.addMethod(nameGetMethod);</div><div class="line">            stuClass.addMethod(nameSetMethod);</div><div class="line"></div><div class="line">            <span class="comment">//创建构造方法</span></div><div class="line">            <span class="comment">//添加有参构造器</span></div><div class="line">            CtConstructor constructor = <span class="keyword">new</span> CtConstructor(<span class="keyword">new</span> CtClass[]&#123;CtClass.longType,pool.get(<span class="string">"java.lang.String"</span>)&#125;,stuClass);</div><div class="line">            constructor.setBody(<span class="string">"&#123;this.id=id;this.name=name;&#125;"</span>);</div><div class="line">            stuClass.addConstructor(constructor);</div><div class="line">            <span class="comment">//无参构造器</span></div><div class="line">            CtConstructor cons = <span class="keyword">new</span> CtConstructor(<span class="keyword">null</span>,stuClass);</div><div class="line">            cons.setBody(<span class="string">"&#123;&#125;"</span>);</div><div class="line">            stuClass.addConstructor(cons);</div><div class="line"></div><div class="line">            <span class="comment">//生成到文件中</span></div><div class="line">            <span class="comment">//stuClass.writeFile("C:/workproject");</span></div><div class="line"></div><div class="line">            <span class="comment">//如果要使用生成的类，可以通过如下方式加载并获取</span></div><div class="line">            <span class="comment">//输出并加载class 类，默认加载到当前线程的ClassLoader中，也可以选择输出的ClassLoader。</span></div><div class="line">            Class clazz = stuClass.toClass();</div><div class="line">            <span class="comment">// 下面是反射相关api</span></div><div class="line">            System.out.println(<span class="string">"class:"</span>+clazz.getName());</div><div class="line">            System.out.println(<span class="string">"------------属性列表------------"</span>);</div><div class="line">            Field[] fields = clazz.getDeclaredFields();</div><div class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">                    System.out.println(field.getType()+<span class="string">"\t"</span>+field.getName());</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"------------方法列表------------"</span>);</div><div class="line">            <span class="comment">//方法</span></div><div class="line">            Method[] methods = clazz.getDeclaredMethods();</div><div class="line">            <span class="keyword">for</span> (Method method: methods)&#123;</div><div class="line">                    System.out.println(method.getReturnType()+<span class="string">"\t"</span>+method.getName()+<span class="string">"\t"</span>+ Arrays.toString(method.getParameterTypes()));</div><div class="line">            &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>若将该类生成到文件中，可以得到Student.class文件，将该文件反编译可得到如下图片结果，正是我们所创建的类</p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180313/BlDlCcamK7.png?imageslim" alt="mark"></p><h4 id="动态修改类方法"><a href="#动态修改类方法" class="headerlink" title="动态修改类方法"></a>动态修改类方法</h4><p>用于被修改的类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line">                <span class="keyword">long</span> sum = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">                        sum += i;</div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="string">"n="</span>+n+<span class="string">",sum="</span>+sum);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用javassist修改类实例代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 使用javassist动态修改一个类</span></div><div class="line"><span class="comment">* 修改getSum的方法名为getSum$impl,并在方法体上加上一句输出</span></div><div class="line"><span class="comment">* 创建一个方法复制原来的getSum方法，并在其内调用修改后的getSum方法</span></div><div class="line"><span class="comment">* 其实这相当于在使用javassist实现动态代理，因为用户使用的仍然是getSum方法，而该方法实际上已经被我们篡改</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">modifyClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">       ClassPool classPool = ClassPool.getDefault();</div><div class="line">       <span class="comment">//获取类</span></div><div class="line">       CtClass ctClass = classPool.get(<span class="string">"com.ssist.Calculator"</span>);</div><div class="line"></div><div class="line">       <span class="comment">// 需要修改的方法名称</span></div><div class="line">       String mname = <span class="string">"getSum"</span>;</div><div class="line">       CtMethod mold = ctClass.getDeclaredMethod(mname);</div><div class="line">       <span class="comment">// 修改原有的方法名称</span></div><div class="line">       String nname = mname + <span class="string">"$impl"</span>;</div><div class="line">       mold.setName(nname);</div><div class="line">       <span class="comment">//在方法执行前插入一条语句</span></div><div class="line">       mold.insertBefore(<span class="string">"System.out.println(\"这是插入的内容\");"</span>);</div><div class="line">       <span class="comment">//可以直接设置方法内容</span></div><div class="line">       <span class="comment">//mold.setBody("");</span></div><div class="line"></div><div class="line"></div><div class="line">       <span class="comment">//创建新的方法，复制原来的方法</span></div><div class="line">       CtMethod mnew = CtNewMethod.copy(mold, mname, ctClass, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">       <span class="comment">// 主要的注入代码</span></div><div class="line">       StringBuffer body = <span class="keyword">new</span> StringBuffer();</div><div class="line">       body.append(<span class="string">"&#123;\nlong start = System.currentTimeMillis();\n"</span>);</div><div class="line">       <span class="comment">// 调用原有代码，类似于method();($$)表示所有的参数</span></div><div class="line">       body.append(nname + <span class="string">"($$);\n"</span>);</div><div class="line">       body.append(<span class="string">"System.out.println(\"Call to method "</span> + mname</div><div class="line">               + <span class="string">" took \" +\n (System.currentTimeMillis()-start) + "</span> + <span class="string">"\" ms.\");\n"</span>);</div><div class="line">       body.append(<span class="string">"&#125;"</span>);</div><div class="line"></div><div class="line">       <span class="comment">// 替换新方法</span></div><div class="line">       mnew.setBody(body.toString());</div><div class="line">       <span class="comment">// 增加新方法</span></div><div class="line">       ctClass.addMethod(mnew);</div><div class="line"></div><div class="line">       <span class="comment">//执行修改后的getSum方法--此时该方法名称已改为getSum$Impl</span></div><div class="line">       System.out.println(<span class="string">"-----这是在执行原来的getSum方法，修改后是getSum$Impl方法-------"</span>);</div><div class="line">       Calculator calculator =(Calculator)ctClass.toClass().newInstance();</div><div class="line">       Class  clazz = Calculator.class;</div><div class="line">       Method declaredMethod = clazz.getDeclaredMethod(nname, <span class="keyword">long</span>.class);</div><div class="line">       declaredMethod.invoke(calculator,<span class="number">10000</span>);</div><div class="line"></div><div class="line">       <span class="comment">//执行新添加的方法getSum，该方法为复制原来的getSum方法，并修改了部分方法体内容</span></div><div class="line">       System.out.println(<span class="string">"-----这是在执行新添加的getSum方法(原来的getSum已经改名)-----"</span>);</div><div class="line">       calculator.getSum(<span class="number">10000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="javassist执行流程图和UML类图"><a href="#javassist执行流程图和UML类图" class="headerlink" title="javassist执行流程图和UML类图"></a>javassist执行流程图和UML类图</h4><p>执行流程图:<br><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180313/Kc6bEAc6fa.png?imageslim" alt="mark"><br>类图:<br><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180313/JgL0he3Hj9.png?imageslim" alt="mark"></p><h4 id="javassist特殊符号说明及注意点"><a href="#javassist特殊符号说明及注意点" class="headerlink" title="javassist特殊符号说明及注意点"></a>javassist特殊符号说明及注意点</h4><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180313/16AjKld6mf.png?imageslim" alt="mark"><br>注意点:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">javassist 特殊语法说明：</div><div class="line">a) 不能引用在方法中其它地方定义的局部变量</div><div class="line">b) 不会对类型进行强制检查：如 int start = System.currentTimeMillis(); 或 String i=”abc”;</div></pre></td></tr></table></figure></p><h4 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h4><p><a href="https://www.cnblogs.com/sunfie/p/5154246.html" target="_blank" rel="external">Java学习之javassist</a><br><a href="http://blog.csdn.net/top_code/article/details/51708043" target="_blank" rel="external">Java动态编程之javassist</a><br>鲁班大师pdf文档</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过前两节，了解了javaagent相关的知识，无论静态agent还是动态agent都可以在对应用无侵入的情况下实现对应用的监控(拦截)，那么我们拦截应用的执行有什么用呢？答案是可以实现应用的监控，对类字节码的修改，动态代理等等，如果要修改类字节码则需要一个工具，这个工具就是javassist&lt;br&gt;Javassist是一个开源的分析、编辑和创建Java字节码的类库。其主要的优点，在于简单，而且快速。直接使用java编码的形式，而不需要了解虚拟机指令，就能动态改变类的结构，或者动态生成&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangshaoxiang.github.io/categories/java/"/>
    
    
      <category term="APM" scheme="https://yangshaoxiang.github.io/tags/APM/"/>
    
      <category term="javaagent" scheme="https://yangshaoxiang.github.io/tags/javaagent/"/>
    
  </entry>
  
  <entry>
    <title>APM(2)动态javaagent使用</title>
    <link href="https://yangshaoxiang.github.io/2018/03/09/APM(2)%E5%8A%A8%E6%80%81javaagent%E4%BD%BF%E7%94%A8/"/>
    <id>https://yangshaoxiang.github.io/2018/03/09/APM(2)动态javaagent使用/</id>
    <published>2018-03-09T12:31:26.000Z</published>
    <updated>2019-04-26T06:31:44.680Z</updated>
    
    <content type="html"><![CDATA[<p>通过 <a href="https://yangshaoxiang.github.io/2018/03/07/APM(1)%E9%9D%99%E6%80%81javaagent%E4%BD%BF%E7%94%A8/#more">上一篇博客</a> 可以知道静态javaagent的使用必须在启动项目时加上javagent的相关启动参数，并且premain()方法也总是在main()方法之前执行，因此有一一定的局限性，在java6之后则做出了改变，有另一种方式可以在main方法启动之后执行，而且不需要添加jvm的启动参数<br><a id="more"></a></p><h4 id="动态javaagent使用步骤"><a href="#动态javaagent使用步骤" class="headerlink" title="动态javaagent使用步骤"></a>动态javaagent使用步骤</h4><ol><li><p>任意编写一个类，类中有如下两个方法之一即可(若两个都有，多参的优先级高)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String arg, Instrumentation instrumentation)</span></span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String arg)</span></span>&#123;&#125;</div></pre></td></tr></table></figure><p> 示例代码:  </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String args, Instrumentation agentmain)</span> </span>&#123;</div><div class="line">    System.out.println(String.format(<span class="string">"系统载入agentmain 参数%s 载入方法:premain"</span>, args));</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>动态的agent相对于静态agent需要添加两个依赖，构建打包时在pom文件中加入如下配置，让该类在打包成jar包时他的MANIFEST.MF文件中有代表该类为Agent类的信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"> <span class="comment">&lt;!-- 使用atch时要引入--&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tl.viptest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jconsole<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;java.home&#125;/../lib/jconsole.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tl.viptest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;java.home&#125;/../lib/tools.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">archive</span>&gt;</span></div><div class="line">                      <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></div><div class="line">                          <span class="tag">&lt;<span class="name">Project-name</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">Project-name</span>&gt;</span></div><div class="line">                          <span class="tag">&lt;<span class="name">Project-version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">Project-version</span>&gt;</span></div><div class="line">                          <span class="tag">&lt;<span class="name">Boot-Class-Path</span>&gt;</span>javassist-3.18.1-GA.jar<span class="tag">&lt;/<span class="name">Boot-Class-Path</span>&gt;</span></div><div class="line">                          <span class="tag">&lt;<span class="name">Agent-Class</span>&gt;</span>上面编写的agent类全路径<span class="tag">&lt;/<span class="name">Agent-Class</span>&gt;</span></div><div class="line">                          <span class="tag">&lt;<span class="name">Can-Redefine-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Redefine-Classes</span>&gt;</span></div><div class="line">                      <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure><p> 在<agent-class>标签下加上Agent类的全路径，完成后将该类所在的项目打成jar包<br> 参数含义:  </agent-class></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#动态agent 类</div><div class="line">Agent-Class: com.agenttest.DynamicAgent</div><div class="line">#agent 依懒包逗号分割</div><div class="line">Boot-Class-Path: javassist-<span class="number">3.18</span>.1-GA.jar</div><div class="line">#是否允许重复装载</div><div class="line">Can-Redefine-Classes: <span class="keyword">true</span></div></pre></td></tr></table></figure></li><li><p>测试<br> 执行main方法获取当前运行的jvm的进程id，之后睡眠当前线程，将获取到的进程id填入agentAttach()的局部变量targetPid，之后执行agentAttach()方法  </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</div><div class="line"><span class="keyword">import</span> org.junit.Ignore;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAgentTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"输出进程ID："</span>+ ManagementFactory.getRuntimeMXBean().getName());</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            Thread.sleep(<span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Ignore</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">agentAttach</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String targetPid = <span class="string">"16004"</span>;<span class="comment">//这里输入main方法获取到的进程id</span></div><div class="line">        VirtualMachine vm = VirtualMachine.attach(targetPid);</div><div class="line">        vm.loadAgent(<span class="string">"jar包所在磁盘路径"</span>, <span class="string">"传入的参数"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 输出结果如下:  </p><p> <img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180312/GIC7J7DLaj.png?imageslim" alt="mark"></p><p> 结论:  动态agent可以在main方法启动后执行，并且启动的main方法不需要加任何的jvm启动参数</p></li></ol><h4 id="流程总结及与静态agent对比"><a href="#流程总结及与静态agent对比" class="headerlink" title="流程总结及与静态agent对比"></a>流程总结及与静态agent对比</h4><pre><code>1. 静态动态agent都是首先任意编写一个agent类，区别是静态agent类中必须要有premain()方法，动态agent类中必须要有agentmain()方法2. 将该类打成jar包，静态agent的jar中MANIFEST.MF必须要有Premain-Class，对于动态agent的jar中MANIFEST.MF必须要有Agent-Class3. 运行时静态agent的premain方法会在main方法之前执行，并且执行main方法是必须添加对应的jvm启动参数，动态agent的agentmain方法在main方法启动后才会执行,并且无需main方法所在类添加jvm启动参数</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过 &lt;a href=&quot;https://yangshaoxiang.github.io/2018/03/07/APM(1)%E9%9D%99%E6%80%81javaagent%E4%BD%BF%E7%94%A8/#more&quot;&gt;上一篇博客&lt;/a&gt; 可以知道静态javaagent的使用必须在启动项目时加上javagent的相关启动参数，并且premain()方法也总是在main()方法之前执行，因此有一一定的局限性，在java6之后则做出了改变，有另一种方式可以在main方法启动之后执行，而且不需要添加jvm的启动参数&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangshaoxiang.github.io/categories/java/"/>
    
    
      <category term="APM" scheme="https://yangshaoxiang.github.io/tags/APM/"/>
    
      <category term="javaagent" scheme="https://yangshaoxiang.github.io/tags/javaagent/"/>
    
  </entry>
  
  <entry>
    <title>APM(1)静态javaagent使用</title>
    <link href="https://yangshaoxiang.github.io/2018/03/07/APM(1)%E9%9D%99%E6%80%81javaagent%E4%BD%BF%E7%94%A8/"/>
    <id>https://yangshaoxiang.github.io/2018/03/07/APM(1)静态javaagent使用/</id>
    <published>2018-03-07T12:31:26.000Z</published>
    <updated>2019-04-26T06:31:44.038Z</updated>
    
    <content type="html"><![CDATA[<p>javaagent是java5的新特性，依赖他我们可以构建一个独立于应用程序的代理程序（Agent），用来监测和协助运行在 JVM 上的程序，甚至能够替换和修改某些类的定义，过程上简单来说就是编写一个特殊的类将其打成jar包，要监控(拦截)的项目在启动时jvm参数加上特殊的启动命令，即可监控该项目<br><a id="more"></a></p><h4 id="javaagent使用步骤"><a href="#javaagent使用步骤" class="headerlink" title="javaagent使用步骤"></a>javaagent使用步骤</h4><ol><li><p>任意编写一个类，类中有如下两个方法之一即可</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">* <span class="doctag">@param</span> arg agentArgs 是 premain 函数得到的程序参数，随同 “– javaagent”一起传入。</span></div><div class="line"><span class="comment">* <span class="doctag">@param</span> instrumentation instrumentation 是一个 java.lang.instrument.Instrumentation 的实例，由 JVM 自动传入</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String arg, Instrumentation instrumentation)</span></span>&#123;&#125;</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String arg)</span></span>&#123;&#125;</div></pre></td></tr></table></figure><p> 示例代码:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.agenttest;</div><div class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstAgent</span> </span>&#123;</div><div class="line">    <span class="comment">//静态装载agent</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String arg, Instrumentation instrumentation)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"这里执行了premain()方法，进行了装载"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>在pom文件中加入如下配置，让该类在打包成jar包时他的MANIFEST.MF文件中有代表该类为Agent类的信息</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">archive</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></div><div class="line">                         <span class="tag">&lt;<span class="name">Project-name</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">Project-name</span>&gt;</span></div><div class="line">                         <span class="tag">&lt;<span class="name">Project-version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">Project-version</span>&gt;</span></div><div class="line">                         <span class="tag">&lt;<span class="name">Premain-Class</span>&gt;</span>com.agenttest.FirstAgent<span class="tag">&lt;/<span class="name">Premain-Class</span>&gt;</span></div><div class="line">                        <span class="comment">&lt;!-- &lt;Boot-Class-Path&gt;javassist-3.18.1-GA.jar&lt;/Boot-Class-Path&gt;</span></div><div class="line"><span class="comment">                         &lt;Agent-Class&gt;com.agenttest.DynamicAgent&lt;/Agent-Class&gt;</span></div><div class="line"><span class="comment">                         &lt;Can-Redefine-Classes&gt;true&lt;/Can-Redefine-Classes&gt;--&gt;</span></div><div class="line">                     <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></div><div class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure><p> 在<premain-class>标签下加上Agent类的全路径，完成后将该类所在的项目打成jar包<br> 参数含义:  </premain-class></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#动态agent 类</div><div class="line">Agent-Class: com.agenttest.DynamicAgent</div><div class="line">#agent 依懒包逗号分割</div><div class="line">Boot-Class-Path: javassist-<span class="number">3.18</span>.1-GA.jar</div><div class="line">#是否允许重复装载</div><div class="line">Can-Redefine-Classes: <span class="keyword">true</span></div><div class="line">#静agent 类</div><div class="line">Premain-Class: com.agenttest.FirstAgent</div></pre></td></tr></table></figure></li><li><p>在运行要被”拦截”的项目时，添加一个jvm的启动参数<br><code>-javaagent:xxx.jar(=parama=aaa)</code>：xxx是jar包的路径,后面可以接着跟参数<br><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180308/9bjHD4LDiJ.png?imageslim" alt="mark">测试类中示例代码:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstAgentTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"main方法中的输出"</span>);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>运行结果<br> 会先执行premain中的方法，在执行main方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">这里执行了premain()方法，进行了装载</div><div class="line">main方法中的输出</div></pre></td></tr></table></figure></li></ol><h4 id="javaagent的jar和普通jar区别"><a href="#javaagent的jar和普通jar区别" class="headerlink" title="javaagent的jar和普通jar区别"></a>javaagent的jar和普通jar区别</h4><p> <img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180308/H5De9120bI.png?imageslim" alt="mark"></p><h4 id="javaagent-底层流程"><a href="#javaagent-底层流程" class="headerlink" title="javaagent 底层流程"></a>javaagent 底层流程</h4><p>javaagent 装载时序图（premain）：</p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180308/L39b2Eiegf.png?imageslim" alt="mark"></p><p>Class 装载时序图</p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180308/DG84aabfmD.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javaagent是java5的新特性，依赖他我们可以构建一个独立于应用程序的代理程序（Agent），用来监测和协助运行在 JVM 上的程序，甚至能够替换和修改某些类的定义，过程上简单来说就是编写一个特殊的类将其打成jar包，要监控(拦截)的项目在启动时jvm参数加上特殊的启动命令，即可监控该项目&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangshaoxiang.github.io/categories/java/"/>
    
    
      <category term="APM" scheme="https://yangshaoxiang.github.io/tags/APM/"/>
    
      <category term="javaagent" scheme="https://yangshaoxiang.github.io/tags/javaagent/"/>
    
  </entry>
  
  <entry>
    <title>linux下JavaWeb开发环境搭建</title>
    <link href="https://yangshaoxiang.github.io/2017/12/24/linux%E4%B8%8BJavaWeb%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://yangshaoxiang.github.io/2017/12/24/linux下JavaWeb开发环境搭建/</id>
    <published>2017-12-24T15:20:21.000Z</published>
    <updated>2019-04-26T06:31:44.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="web开发基本环境安装配置"><a href="#web开发基本环境安装配置" class="headerlink" title="web开发基本环境安装配置"></a>web开发基本环境安装配置</h3><p>  JavaWeb开发中生产环境一般都为linux，因此我们要具有在linux环境下搭建基本的JavaWeb开发常用环境的能力，本篇博客介绍的是linux环境下jdk的安装，tomcat的安装，及mysql数据库的安装<br><a id="more"></a></p><h4 id="jdk的安装"><a href="#jdk的安装" class="headerlink" title="jdk的安装"></a>jdk的安装</h4><ol><li>到<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">oracle官网下载</a>linux版本jdk安装包上传到/root目录下</li><li><p>解压，指定存放位置</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#解压jdk文件:  </span></div><div class="line">tar zxvf jdk-7u79-linux-x64.gz</div><div class="line"><span class="comment">#创建jdk的实际安装目录</span></div><div class="line">mkdir  /usr/<span class="built_in">local</span>/java</div><div class="line"><span class="comment">#将解压后的文件复制到安装目录中</span></div><div class="line">mv ./jdk1.7.0_79/ /usr/<span class="built_in">local</span>/java</div><div class="line"><span class="comment">#配置环境变量</span></div><div class="line">vi /etc/profile</div></pre></td></tr></table></figure></li><li><p>配置环境变量(注意要与自己的目录匹配)<br> 在profile文件中追加如下内容:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">JAVA_HOME=/usr/local/java/jdk1.7.0_79</div><div class="line">PATH=$PATH:$JAVA_HOME/bin</div><div class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div><div class="line"></div><div class="line">export JAVA_HOME</div><div class="line">export PATH</div><div class="line">export CLASSPATH</div></pre></td></tr></table></figure><p> 执行如下命令使环境变量生效:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> /etc/profile</div></pre></td></tr></table></figure></li><li><p>测试是否成功</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java</div><div class="line">javac</div><div class="line">java -version</div></pre></td></tr></table></figure></li></ol><h4 id="tomcat的安装"><a href="#tomcat的安装" class="headerlink" title="tomcat的安装"></a>tomcat的安装</h4><ol><li>将tomcat安装包上传到linux中</li><li><p>解压，转移</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 解压</span></div><div class="line">tar zfvx apache-tomcat-7.0.68.tar.gz</div><div class="line"><span class="comment"># 移动</span></div><div class="line">mv ./apache-tomcat-7.0.68 /usr/<span class="built_in">local</span>/tomcat</div><div class="line"><span class="comment">#启动</span></div><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/tomcat/bin</div><div class="line"> ./startup.sh</div></pre></td></tr></table></figure></li><li><p>添加防火墙端口(8080)</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi  /etc/sysconfig/iptables</div><div class="line"><span class="comment"># 在打开的文件中加入如下内容</span></div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT</div></pre></td></tr></table></figure></li><li><p>测试，访问<br>浏览器访问 <a href="http://ip_or__domain:8080/" target="_blank" rel="external">http://ip_or__domain:8080/</a></p></li></ol><h4 id="mysql的安装"><a href="#mysql的安装" class="headerlink" title="mysql的安装"></a>mysql的安装</h4><h5 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h5><ol><li><p><a href="https://dev.mysql.com/downloads/mysql/5.6.html#downloads" title="点击进入下载页" target="_blank" rel="external">下载mysql</a>的源码包，选项如下图所示:<br><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/171218/K0ffI1dJ7H.png?imageslim" alt="mark">  </p></li><li><p>制作安装脚本<br>新建一个名称为mysql_install_offline.sh的文本文件，将下面的文本内容复制到新建的文本中,要注意文本中mysql_6_version是你下载的源码包的版本,dbrootpwd代表数据库密码</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div></pre></td><td class="code"><pre><div class="line"><span class="meta"> #</span><span class="bash">!/bin/bash</span></div><div class="line"></div><div class="line">yum install bison cmake gcc make ncurses perl wget</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> Notes: install mysql5.6 on centos</span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line">mysql_install_dir=/usr/mysql</div><div class="line">mysql_data_dir=/data/mysql</div><div class="line">mysql_6_version=5.6.38</div><div class="line">dbrootpwd=123456</div><div class="line"></div><div class="line">Mem=`free -m | awk '/Mem:/&#123;print $2&#125;'`</div><div class="line">Swap=`free -m | awk '/Swap:/&#123;print $2&#125;'`</div><div class="line"></div><div class="line">Install_MySQL-5-6()</div><div class="line">&#123;</div><div class="line">yum -y install make gcc-c++ cmake bison-devel  ncurses-devel</div><div class="line"><span class="meta">#</span><span class="bash">wget http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-<span class="variable">$&#123;mysql_6_version&#125;</span>.tar.gz</span></div><div class="line"></div><div class="line">id -u mysql &gt;/dev/null 2&gt;&amp;1</div><div class="line">[ $? -ne 0 ] &amp;&amp; useradd -M -s /sbin/nologin mysql</div><div class="line"></div><div class="line">mkdir -p $mysql_data_dir;chown mysql.mysql -R $mysql_data_dir</div><div class="line">tar zxf mysql-$&#123;mysql_6_version&#125;.tar.gz</div><div class="line">cd mysql-$mysql_6_version</div><div class="line">make clean</div><div class="line">[ ! -d "$mysql_install_dir" ] &amp;&amp; mkdir -p $mysql_install_dir</div><div class="line">cmake . -DCMAKE_INSTALL_PREFIX=$mysql_install_dir \</div><div class="line">-DMYSQL_DATADIR=$mysql_data_dir \</div><div class="line">-DSYSCONFDIR=/etc \</div><div class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_PARTITION_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_FEDERATED_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</div><div class="line">-DENABLED_LOCAL_INFILE=1 \</div><div class="line">-DENABLE_DTRACE=0 \</div><div class="line">-DEXTRA_CHARSETS=all \</div><div class="line">-DDEFAULT_CHARSET=utf8mb4 \</div><div class="line">-DDEFAULT_COLLATION=utf8mb4_general_ci \</div><div class="line">-DWITH_EMBEDDED_SERVER=1 \</div><div class="line"></div><div class="line">make -j `grep processor /proc/cpuinfo | wc -l`</div><div class="line">make install</div><div class="line"></div><div class="line">if [ -d "$mysql_install_dir/support-files" ];then</div><div class="line">    echo "$&#123;CSUCCESS&#125;MySQL install successfully! $&#123;CEND&#125;"</div><div class="line">    cd ..</div><div class="line">    rm -rf mysql-$mysql_6_version</div><div class="line">else</div><div class="line">    rm -rf $mysql_install_dir</div><div class="line">    echo "$&#123;CFAILURE&#125;MySQL install failed, Please contact the author! $&#123;CEND&#125;"</div><div class="line">    kill -9 $$</div><div class="line">fi</div><div class="line"></div><div class="line">/bin/cp $mysql_install_dir/support-files/mysql.server /etc/init.d/mysqld</div><div class="line">chmod +x /etc/init.d/mysqld</div><div class="line">chkconfig mysqld on</div><div class="line">cd ..</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> my.cf</span></div><div class="line">[ -d "/etc/mysql" ] &amp;&amp; /bin/mv /etc/mysql&#123;,_bk&#125;</div><div class="line">cat &gt; /etc/my.cnf &lt;&lt; EOF</div><div class="line">[client]</div><div class="line">port = 3306</div><div class="line">socket = /tmp/mysql.sock</div><div class="line">default-character-set = utf8mb4</div><div class="line"></div><div class="line">[mysqld]</div><div class="line">port = 3306</div><div class="line">socket = /tmp/mysql.sock</div><div class="line"></div><div class="line">basedir = $mysql_install_dir</div><div class="line">datadir = $mysql_data_dir</div><div class="line">pid-file = $mysql_data_dir/mysql.pid</div><div class="line">user = mysql</div><div class="line">bind-address = 0.0.0.0</div><div class="line">server-id = 1</div><div class="line"></div><div class="line">init-connect = 'SET NAMES utf8mb4'</div><div class="line">character-set-server = utf8mb4</div><div class="line"></div><div class="line">skip-name-resolve</div><div class="line">skip-external-locking</div><div class="line"><span class="meta">#</span><span class="bash">skip-networking</span></div><div class="line">back_log = 300</div><div class="line"></div><div class="line">max_connections = 1000</div><div class="line">max_connect_errors = 6000</div><div class="line">open_files_limit = 65535</div><div class="line">table_open_cache = 128</div><div class="line">max_allowed_packet = 4M</div><div class="line">binlog_cache_size = 1M</div><div class="line">max_heap_table_size = 8M</div><div class="line">tmp_table_size = 16M</div><div class="line"></div><div class="line">read_buffer_size = 2M</div><div class="line">read_rnd_buffer_size = 8M</div><div class="line">sort_buffer_size = 8M</div><div class="line">join_buffer_size = 8M</div><div class="line">key_buffer_size = 4M</div><div class="line">thread_cache_size = 8</div><div class="line">query_cache_type = 1</div><div class="line">query_cache_size = 8M</div><div class="line">query_cache_limit = 2M</div><div class="line">ft_min_word_len = 4</div><div class="line">log_bin = mysql-bin</div><div class="line">binlog_format = mixed</div><div class="line">expire_logs_days = 10</div><div class="line">log_error = $mysql_data_dir/mysql-error.log</div><div class="line">slow_query_log = 1</div><div class="line">long_query_time = 1</div><div class="line"><span class="meta">#</span><span class="bash">slow_query_log_file = <span class="variable">$mysql_data_dir</span>/mysql-slow.log</span></div><div class="line">performance_schema = 0</div><div class="line">explicit_defaults_for_timestamp</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">lower_case_table_names = 1</span></div><div class="line">default_storage_engine = InnoDB</div><div class="line"><span class="meta">#</span><span class="bash">default-storage-engine = MyISAM</span></div><div class="line">innodb_file_per_table = 1</div><div class="line">innodb_open_files = 500</div><div class="line">innodb_buffer_pool_size = 64M</div><div class="line">innodb_write_io_threads = 4</div><div class="line">innodb_read_io_threads = 4</div><div class="line">innodb_thread_concurrency = 0</div><div class="line">innodb_purge_threads = 1</div><div class="line">innodb_flush_log_at_trx_commit = 2</div><div class="line">innodb_log_buffer_size = 2M</div><div class="line">innodb_log_file_size = 32M</div><div class="line">innodb_log_files_in_group = 3</div><div class="line">innodb_max_dirty_pages_pct = 90</div><div class="line">innodb_lock_wait_timeout = 120</div><div class="line"></div><div class="line">bulk_insert_buffer_size = 8M</div><div class="line">myisam_sort_buffer_size = 8M</div><div class="line">myisam_max_sort_file_size = 10G</div><div class="line">myisam_repair_threads = 1</div><div class="line"></div><div class="line">interactive_timeout = 28800</div><div class="line">wait_timeout = 28800</div><div class="line"></div><div class="line">[mysqldump]</div><div class="line">quick</div><div class="line">max_allowed_packet = 16M</div><div class="line"></div><div class="line">[myisamchk]</div><div class="line">key_buffer_size = 8M</div><div class="line">sort_buffer_size = 8M</div><div class="line">read_buffer = 4M</div><div class="line">write_buffer = 4M</div><div class="line"></div><div class="line">EOF</div><div class="line"></div><div class="line">if [ $Mem -gt 1500 -a $Mem -le 2500 ];then</div><div class="line">    sed -i 's@^thread_cache_size.*@thread_cache_size = 16@' /etc/my.cnf</div><div class="line">    sed -i 's@^query_cache_size.*@query_cache_size = 16M@' /etc/my.cnf</div><div class="line">    sed -i 's@^myisam_sort_buffer_size.*@myisam_sort_buffer_size = 16M@' /etc/my.cnf</div><div class="line">    sed -i 's@^key_buffer_size.*@key_buffer_size = 16M@' /etc/my.cnf</div><div class="line">    sed -i 's@^innodb_buffer_pool_size.*@innodb_buffer_pool_size = 128M@' /etc/my.cnf</div><div class="line">    sed -i 's@^tmp_table_size.*@tmp_table_size = 32M@' /etc/my.cnf</div><div class="line">    sed -i 's@^table_open_cache.*@table_open_cache = 256@' /etc/my.cnf</div><div class="line">elif [ $Mem -gt 2500 -a $Mem -le 3500 ];then</div><div class="line">    sed -i 's@^thread_cache_size.*@thread_cache_size = 32@' /etc/my.cnf</div><div class="line">    sed -i 's@^query_cache_size.*@query_cache_size = 32M@' /etc/my.cnf</div><div class="line">    sed -i 's@^myisam_sort_buffer_size.*@myisam_sort_buffer_size = 32M@' /etc/my.cnf</div><div class="line">    sed -i 's@^key_buffer_size.*@key_buffer_size = 64M@' /etc/my.cnf</div><div class="line">    sed -i 's@^innodb_buffer_pool_size.*@innodb_buffer_pool_size = 512M@' /etc/my.cnf</div><div class="line">    sed -i 's@^tmp_table_size.*@tmp_table_size = 64M@' /etc/my.cnf</div><div class="line">    sed -i 's@^table_open_cache.*@table_open_cache = 512@' /etc/my.cnf</div><div class="line">elif [ $Mem -gt 3500 ];then</div><div class="line">    sed -i 's@^thread_cache_size.*@thread_cache_size = 64@' /etc/my.cnf</div><div class="line">    sed -i 's@^query_cache_size.*@query_cache_size = 64M@' /etc/my.cnf</div><div class="line">    sed -i 's@^myisam_sort_buffer_size.*@myisam_sort_buffer_size = 64M@' /etc/my.cnf</div><div class="line">    sed -i 's@^key_buffer_size.*@key_buffer_size = 256M@' /etc/my.cnf</div><div class="line">    sed -i 's@^innodb_buffer_pool_size.*@innodb_buffer_pool_size = 1024M@' /etc/my.cnf</div><div class="line">    sed -i 's@^tmp_table_size.*@tmp_table_size = 128M@' /etc/my.cnf</div><div class="line">    sed -i 's@^table_open_cache.*@table_open_cache = 1024@' /etc/my.cnf</div><div class="line">fi</div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash">mysql_install_dir/scripts/mysql_install_db --user=mysql --basedir=<span class="variable">$mysql_install_dir</span> --datadir=<span class="variable">$mysql_data_dir</span></span></div><div class="line"></div><div class="line">chown mysql.mysql -R $mysql_data_dir</div><div class="line">service mysqld start</div><div class="line">[ -z "`grep ^'export PATH=' /etc/profile`" ] &amp;&amp; echo "export PATH=$mysql_install_dir/bin:\$PATH" &gt;&gt; /etc/profile</div><div class="line">[ -n "`grep ^'export PATH=' /etc/profile`" -a -z "`grep $mysql_install_dir /etc/profile`" ] &amp;&amp; sed -i "s@^export PATH=\(.*\)@export PATH=$mysql_install_dir/bin:\1@" /etc/profile</div><div class="line"></div><div class="line">. /etc/profile</div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash">mysql_install_dir/bin/mysql -e <span class="string">"grant all privileges on *.* to root@'127.0.0.1' identified by \"<span class="variable">$dbrootpwd</span>\" with grant option;"</span></span></div><div class="line"><span class="meta">$</span><span class="bash">mysql_install_dir/bin/mysql -e <span class="string">"grant all privileges on *.* to root@'localhost' identified by \"<span class="variable">$dbrootpwd</span>\" with grant option;"</span></span></div><div class="line"><span class="meta">$</span><span class="bash">mysql_install_dir/bin/mysql -uroot -p<span class="variable">$dbrootpwd</span> -e <span class="string">"delete from mysql.user where Password='';"</span></span></div><div class="line"><span class="meta">$</span><span class="bash">mysql_install_dir/bin/mysql -uroot -p<span class="variable">$dbrootpwd</span> -e <span class="string">"delete from mysql.db where User='';"</span></span></div><div class="line"><span class="meta">$</span><span class="bash">mysql_install_dir/bin/mysql -uroot -p<span class="variable">$dbrootpwd</span> -e <span class="string">"delete from mysql.proxies_priv where Host!='localhost';"</span></span></div><div class="line"><span class="meta">$</span><span class="bash">mysql_install_dir/bin/mysql -uroot -p<span class="variable">$dbrootpwd</span> -e <span class="string">"drop database test;"</span></span></div><div class="line"><span class="meta">$</span><span class="bash">mysql_install_dir/bin/mysql -uroot -p<span class="variable">$dbrootpwd</span> -e <span class="string">"reset master;"</span></span></div><div class="line">rm -rf /etc/ld.so.conf.d/&#123;mysql,mariadb,percona&#125;*.conf</div><div class="line">echo "$mysql_install_dir/lib" &gt; mysql.conf</div><div class="line">/sbin/ldconfig</div><div class="line">service mysqld stop</div><div class="line">&#125;</div><div class="line">Install_MySQL-5-6</div></pre></td></tr></table></figure></li><li><p>将源码包及及脚本上传到linux中<br>例如我这里将两个文件上传到了/root中，关于如何上传，查看<a href="https://yangshaoxiang.github.io/2017/12/09/linux%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/#more">上一篇博客</a></p></li><li><p>执行脚本安装mysql</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /root</div><div class="line"><span class="comment">#使脚本具有可执行的权限</span></div><div class="line">chmod +x mysql_install_offline.sh</div><div class="line"><span class="comment">#执行之前安装autoconf库，此包安装时会安装Data:Dumper模块</span></div><div class="line">yum -y install autoconf</div><div class="line"><span class="comment">#执行安装脚本</span></div><div class="line">./mysql_install_offline.sh</div></pre></td></tr></table></figure></li><li><p>添加mysql端口号(3306)到防火墙中</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi  /etc/sysconfig/iptables</div><div class="line"><span class="comment"># 在打开的文件中加入如下内容</span></div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</div></pre></td></tr></table></figure></li></ol><h5 id="配置外网Navicat可访问"><a href="#配置外网Navicat可访问" class="headerlink" title="配置外网Navicat可访问"></a>配置外网Navicat可访问</h5><p>  如果按照以上步骤安装完成后，本地的Navicat无法连接，参考以下步骤</p><ol><li><p>确认开启mysql数据库的服务(解决连接报10038)<br> 在终端下输入：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/rc.d/init.d/mysqld status</div></pre></td></tr></table></figure><p>   查看MySQL状态，看看是否运行，若没有运行的话就输入如下命令初始化数据库：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/rc.d/init.d/mysqld start</div></pre></td></tr></table></figure></li><li><p>无法使用数据库命令<br><code>mysql -u root -p</code> 此项报错 <code>-bash: mysql: command not found</code><br>这是类似于windows中的环境变量没有配置，执行linux命令默认会去/usr/local/bin下去找所以配置一个映射，操作步骤如下:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</div><div class="line">ln -fs /usr/<span class="built_in">local</span>/mysql/bin/mysql</div><div class="line"><span class="comment">#如果报usr/bin/mysql不存在，切换到usr/bin执行如下命令</span></div><div class="line">ln -fs /usr/mysql/bin/mysql</div></pre></td></tr></table></figure></li><li><p>解决连接报1130<br>ERROR 1130: Host xxx.xxx.xxx.xxx  is not allowed to connect to this MySQL server<br>猜想是无法给远程连接的用户权限问题，按如下方式操作:<br> 在本机登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称’%’即可,命令如下:</p>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 以权限用户root登录</div><div class="line">mysql -u root -p</div><div class="line">#查看mysql库中的user表的host值（即可进行连接访问的主机/IP名称）</div><div class="line"><span class="keyword">use</span> mysql;</div><div class="line"><span class="keyword">select</span> host <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</div><div class="line"># 如果已经有%则无需更新</div><div class="line"># 修改host值（以通配符%的内容增加主机/IP地址），当然也可以直接增加IP地址  </div><div class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host = <span class="string">'%'</span> <span class="keyword">where</span> <span class="keyword">user</span> =<span class="string">'root'</span>;</div><div class="line"># 如果报Duplicate entry '%-root' for key 'PRIMARY'错说明表中已存在%，刷新下权限</div><div class="line"># 刷新MySQL的系统权限相关表</div><div class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</div><div class="line"># 再重新查看user表时，是否有修改</div><div class="line"><span class="keyword">select</span> host <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</div></pre></td></tr></table></figure><p>重启mysql服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/rc.d/init.d/mysqld restart</div></pre></td></tr></table></figure><p>搞完上述3步后使用Navicat for MySQL链接，如果失败就继续上网查找其他解决方法吧</p><h3 id="web开发常用linux命令"><a href="#web开发常用linux命令" class="headerlink" title="web开发常用linux命令"></a>web开发常用linux命令</h3><h4 id="防火墙命令"><a href="#防火墙命令" class="headerlink" title="防火墙命令"></a>防火墙命令</h4><p>一般我们访问远程主机上的程序，如数据库，tomcat服务器，zookeeper等，如果未在防火墙中添加端口，可能无法访问，临时简单的解决方式就是关闭防火墙，这里简单介绍防火墙相关简单命令<br>永久性生效，重启后不会复原，命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="comment"># 开启</span></div><div class="line">chkconfig iptables on</div><div class="line"> <span class="comment"># 关闭</span></div><div class="line">chkconfig iptables off</div></pre></td></tr></table></figure><p>即时生效，重启后复原,命令如下:</p><ol><li><p>查看防火墙状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables status</div></pre></td></tr></table></figure></li><li><p>开启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables start</div></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables stop</div></pre></td></tr></table></figure></li></ol><h4 id="tomcat命令"><a href="#tomcat命令" class="headerlink" title="tomcat命令"></a>tomcat命令</h4><ol><li><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 切换到tomcat安装主目录</span></div><div class="line"><span class="built_in">cd</span> tomcat</div><div class="line">tail -f  logs/catalina.out</div></pre></td></tr></table></figure></li><li><p>杀掉tomcat进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 8080代表tomcat的端口号 查看listen的进程号</span></div><div class="line">netstat -nap|grep 8080</div><div class="line"><span class="comment"># 杀掉进程 pid是listen的进程号</span></div><div class="line"><span class="built_in">kill</span> pid</div></pre></td></tr></table></figure></li></ol><h4 id="mysql相关命令"><a href="#mysql相关命令" class="headerlink" title="mysql相关命令"></a>mysql相关命令</h4><ol><li><p>mysql服务启动命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="comment"># mysql服务启动/停止/重启</span></div><div class="line">/etc/rc.d/init.d/mysqld start/stop/restart</div></pre></td></tr></table></figure></li><li><p>运行sql文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 登入数据库后 切换到数据库，执行sql文件</div><div class="line">source /path/xxx.sql</div></pre></td></tr></table></figure></li><li><p>导出数据库  </p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名   </div><div class="line">mysqldump -u root -p db_name &gt; db_name.sql</div></pre></td></tr></table></figure></li><li><p>导出表  </p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># mysqldump -u 用户名 -p 数据库名 该数据库下的表名&gt; 导出的文件名   </div><div class="line">mysqldump -u root -p db_name  tablename&gt; tablename.sql</div></pre></td></tr></table></figure></li></ol></li><li><p>创建用户和授权命令</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 创建用户    </div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'user1'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</div><div class="line"></div><div class="line"># 授权</div><div class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> 想授权的数据库.* <span class="keyword">to</span> <span class="string">'user1'</span>@<span class="string">'%'</span>;</div><div class="line"></div><div class="line"># 刷新权限</div><div class="line"><span class="keyword">flush</span> privilege;</div></pre></td></tr></table></figure><p> 上面的%表示哪些ip可以访问</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&apos;%&apos; - 所有情况都能访问</div><div class="line">‘localhost’ - 本机才能访问</div><div class="line">’127.0.0.1‘ - 指定 ip 才能访问</div></pre></td></tr></table></figure><p> 上面的all表示所有权限，可以具体指定</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">all 可以替换为 select,delete,update,create,drop</div></pre></td></tr></table></figure></li></ol><h4 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h4><ol><li>tree命令以树形式查看文件 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 安装</div><div class="line">yum -y install tree</div><div class="line"></div><div class="line">#一般使用直接tree即可</div><div class="line">tree</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;web开发基本环境安装配置&quot;&gt;&lt;a href=&quot;#web开发基本环境安装配置&quot; class=&quot;headerlink&quot; title=&quot;web开发基本环境安装配置&quot;&gt;&lt;/a&gt;web开发基本环境安装配置&lt;/h3&gt;&lt;p&gt;  JavaWeb开发中生产环境一般都为linux，因此我们要具有在linux环境下搭建基本的JavaWeb开发常用环境的能力，本篇博客介绍的是linux环境下jdk的安装，tomcat的安装，及mysql数据库的安装&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://yangshaoxiang.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://yangshaoxiang.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal解析</title>
    <link href="https://yangshaoxiang.github.io/2017/12/09/ThreadLocal%E8%A7%A3%E6%9E%90/"/>
    <id>https://yangshaoxiang.github.io/2017/12/09/ThreadLocal解析/</id>
    <published>2017-12-09T14:44:21.000Z</published>
    <updated>2019-04-26T06:31:44.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ThreadLocal含义"><a href="#ThreadLocal含义" class="headerlink" title="ThreadLocal含义"></a>ThreadLocal含义</h3><p>首先明确ThreadLocal并不是解决多线程下共享对象的并发访问而产生的，他也做不到这一点，因为他内部保存的仍然是对象的引用，而不是真的存储的是对象本身，通常使用ThreadLocal保存的对象，是当前线程单独创建(new)的对象，然后通过ThreadLocal.set()放入到当前当前线程中，这样对该对象的操作肯定不会影响到其他线程，其他线程也不需要对该对象进行操作(其他线程想要应该要自己去创建属于该线程自己的对象)<br>下面代码证明：ThreadLocal存储的是对象引用，无法保证共享对象的线程安全<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">          <span class="keyword">final</span> Student aa = <span class="keyword">new</span> Student();</div><div class="line">        aa.setName(<span class="string">"初始名称"</span>);</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    ThreadLocal&lt;Student&gt; threadLocal1 = <span class="keyword">new</span> ThreadLocal&lt;Student&gt;();</div><div class="line">                    threadLocal1.set(aa);</div><div class="line">                    System.out.println(<span class="string">"线程一:"</span>+threadLocal1.get().getName());</div><div class="line">                    threadLocal1.get().setName(<span class="string">"被线程一修改后的名称"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    ThreadLocal&lt;Student&gt; threadLocal2 = <span class="keyword">new</span> ThreadLocal&lt;Student&gt;();</div><div class="line">                    threadLocal2.set(aa);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">2000L</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    System.out.println(<span class="string">"线程二:"</span>+threadLocal2.get().getName());</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line"></div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行上面程序获取的结果是:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">线程一:初始名称</div><div class="line">线程二:被线程一修改后的名称</div></pre></td></tr></table></figure></p><p>上面的程序含义是创建一个共享的Student对象，创建两个线程分别在线程内部使用ThreadLocal保存该对象，线程一保存完毕后修改该对象的属性，根据程序运行结果可以看出线程二中保存的Student对象名称也被修改，因此ThreadLocal不能保存或者说不应保存共享对象，他应该只保存当前线程私有(本地)变量</p><h3 id="ThreadLocal的实现-参考的JDK1-7的源码"><a href="#ThreadLocal的实现-参考的JDK1-7的源码" class="headerlink" title="ThreadLocal的实现(参考的JDK1.7的源码)"></a>ThreadLocal的实现(参考的JDK1.7的源码)</h3><h4 id="set-方法"><a href="#set-方法" class="headerlink" title="set()方法"></a>set()方法</h4><p>ThreadLocal保证在当前线程中创建的对象，通过ThreadLocal.set()放入到当前当前线程中，通过ThreadLocal.get()获取存入的值，其他线程无法通过ThreadLocal.get()获取当前线程存入的值，这里的实现可以通过查看ThreadLocal的set/get方法源码查看<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">     Thread t = Thread.currentThread();</div><div class="line">     <span class="comment">//获取当前线程的ThreadLocalMap</span></div><div class="line">     ThreadLocalMap map = getMap(t);</div><div class="line">     <span class="keyword">if</span> (map != <span class="keyword">null</span>)</div><div class="line">        <span class="comment">//存在就直接往里面塞值</span></div><div class="line">         map.set(<span class="keyword">this</span>, value);</div><div class="line">     <span class="keyword">else</span></div><div class="line">        <span class="comment">//不存在，就创建一个，然后设值</span></div><div class="line">         createMap(t, value);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p><ol><li>每一个线程都有一个ThreadLocal.ThreadLocalMap类型的成员变量，这里获取当前线程对应的ThreadLocalMap，他存储的也是key-value类型的数据结构，这里如果不理解ThreadLocalMap的结构可以先将ThreadLocalMap简单看成HashMap，后面具体分析ThreadLocalMap的结构</li><li>如果当前线程有ThreadLocalMap，将ThreadLocal对象本身作为键，要存的值作为值存放到ThreadLocalMap中，没有就创建一个ThreadLocalMap然后存放键及值</li></ol><h4 id="ThreadLocalMap结构及深入set-get-方法"><a href="#ThreadLocalMap结构及深入set-get-方法" class="headerlink" title="ThreadLocalMap结构及深入set()/get()方法"></a>ThreadLocalMap结构及深入set()/get()方法</h4><p>ThreadLocalMap的结构和HashMap类似，如下图所示:  </p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180129/51HJb2Klkf.png?imageslim" alt="mark"></p><p>ThreadLocalMap内部同样有一个初始大小为16的Entry数组，他和HashMap中的Entry区别是</p><ol><li>Entry类继承WeakReference<threadlocal>，他对键的引用是弱引用</threadlocal></li><li>他的数据结构里面没有链表，发生哈希冲突后会根据key判断更新当前位置值还是寻找下一个位置  </li></ol><p>关于第一点区别可以参考Entry类的源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&gt; </span>&#123;</div><div class="line">       Object value;</div><div class="line">       Entry(ThreadLocal k, Object v) &#123;</div><div class="line">           <span class="keyword">super</span>(k);</div><div class="line">           value = v;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><p>从源码上可以看出Entry本质上是WeakReference<threadlocal>，具体来说是Entry实例对ThreadLocal的某个实例是弱引用，同时还持有value的强引用</threadlocal></p><p>关于第二点区别可以参考源码详细分析<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal key, Object value)</span> </span>&#123;</div><div class="line"></div><div class="line">      Entry[] tab = table;</div><div class="line">      <span class="keyword">int</span> len = tab.length;</div><div class="line">      <span class="comment">//确定本次存储在Entry数组的索引位置</span></div><div class="line">      <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</div><div class="line"></div><div class="line">     <span class="comment">/*</span></div><div class="line"><span class="comment">      *对于本次要存储的键值对应位置已有值，则说明发生了hash冲突</span></div><div class="line"><span class="comment">      *发生hash冲突的解决方法是：遍历整个数组，直到找到key或者是找到空位</span></div><div class="line"><span class="comment">      */</span></div><div class="line">      <span class="keyword">for</span> (Entry e = tab[i];</div><div class="line">           e != <span class="keyword">null</span>;</div><div class="line">           e = tab[i = nextIndex(i, len)]) &#123;</div><div class="line">          ThreadLocal k = e.get();</div><div class="line">          <span class="comment">//找到了该Entry并且键值相等，新值换旧值</span></div><div class="line">          <span class="keyword">if</span> (k == key) &#123;</div><div class="line">              e.value = value;</div><div class="line">              <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          <span class="comment">//该位置key已经被gc回收，</span></div><div class="line">          <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</div><div class="line">              replaceStaleEntry(key, value, i);</div><div class="line">              <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//未发生hash碰撞直接赋值即可</span></div><div class="line">      tab[i] = <span class="keyword">new</span> Entry(key, value);</div><div class="line">      <span class="keyword">int</span> sz = ++size;</div><div class="line">      <span class="comment">/*</span></div><div class="line"><span class="comment">       *添加数据后做一下是否扩容的判断</span></div><div class="line"><span class="comment">       *1.没有要清理的被gc回收key的Entry</span></div><div class="line"><span class="comment">       *2.满足容量扩容条件</span></div><div class="line"><span class="comment">       */</span></div><div class="line">      <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</div><div class="line">          rehash();</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>从源码上set()步骤就是</p><ol><li>确定本次存储的键值在Entry数组中的位置</li><li>看是否发生Hash冲突，如果冲突了(该位置已经有Entry对象了)，看该位置的Entry的的key是否为null，为null说明该键已被gc回收，将现有的键值插入即可，不为null查看已经存在的key和本次要插入的key是否相同，如果相同，更新值即可</li><li>未发生冲突直接构造新的键值Entry存到数组中即可</li><li>判断是否需要扩容</li></ol><h3 id="ThreadLocal的应用场景"><a href="#ThreadLocal的应用场景" class="headerlink" title="ThreadLocal的应用场景"></a>ThreadLocal的应用场景</h3><ol><li>hibernate数据库链接池，spring的事务实现</li><li>多层间的参数传递</li><li>某些情况提升安全和性能(DateFormat工具类)</li></ol><h3 id="ThreadLocal的问题-内存泄漏"><a href="#ThreadLocal的问题-内存泄漏" class="headerlink" title="ThreadLocal的问题-内存泄漏"></a>ThreadLocal的问题-内存泄漏</h3><p>所谓ThreadLocal的内存泄漏主要体现在线程池的环境下，Entry中的value无法被垃圾回收器回收，因为有一条强引用链<code>Thread-&gt;ThreadLocalMap-&gt;Entry-&gt;某个Entry中的value</code>,正常情况下当线程执行完销毁后这条引用链就不会存在了，但线程池环境下线程不会被销毁，因此也就造成所谓的内存泄漏，ThreadLocal的源码中也做了一定的措施防范内存泄漏，就是对应线程之后调用ThreadLocal的get和set方法都有很高的概率会顺便清理掉无效对象，断开value强引用，从而大对象被收集器回收。但是这是有概率的，因此线程池环境下，我们编码要注意用完调用remove()方法</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.cnblogs.com/micrari/p/6790229.html" target="_blank" rel="external">ThreadLocal源码解读</a><br><a href="http://blog.csdn.net/u012834750/article/details/71646700" target="_blank" rel="external">ThreadLocal 内部实现、应用场景和内存泄漏</a><br><a href="http://blog.xiaohansong.com/2016/08/09/ThreadLocal-leak-analyze/" target="_blank" rel="external">ThreadLocal 内存泄露的实例分析</a><br><a href="http://www.importnew.com/16112.html" target="_blank" rel="external">清理ThreadLocal</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ThreadLocal含义&quot;&gt;&lt;a href=&quot;#ThreadLocal含义&quot; class=&quot;headerlink&quot; title=&quot;ThreadLocal含义&quot;&gt;&lt;/a&gt;ThreadLocal含义&lt;/h3&gt;&lt;p&gt;首先明确ThreadLocal并不是解决多线程下共享对象的并发访问而产生的，他也做不到这一点，因为他内部保存的仍然是对象的引用，而不是真的存储的是对象本身，通常使用ThreadLocal保存的对象，是当前线程单独创建(new)的对象，然后通过ThreadLocal.set()放入到当前当前线程中，这样对该对象的操作肯定不会影响到其他线程，其他线程也不需要对该对象进行操作(其他线程想要应该要自己去创建属于该线程自己的对象)&lt;br&gt;下面代码证明：ThreadLocal存储的是对象引用，无法保证共享对象的线程安全&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangshaoxiang.github.io/categories/java/"/>
    
    
      <category term="源码解析" scheme="https://yangshaoxiang.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>linux下文件上传下载</title>
    <link href="https://yangshaoxiang.github.io/2017/12/09/linux%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    <id>https://yangshaoxiang.github.io/2017/12/09/linux下文件上传下载/</id>
    <published>2017-12-09T14:44:21.000Z</published>
    <updated>2017-12-18T14:00:22.859Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>本篇博客主要介绍如何去链接远程的linux主机及如何实现本地与远程主机之间文件的上传下载操作，下面的linux系统是CentOS6.6<br><a id="more"></a></p><h4 id="链接远程linux主机"><a href="#链接远程linux主机" class="headerlink" title="链接远程linux主机"></a>链接远程linux主机</h4><p>  一般链接远程linux主机，如果电脑上没有安装类似SecureCRTPortable这种终端仿真程序，我们会用git的命令窗口使用命令去链接，但是这种方式不能保存链接的用户名和密码，下次还要重新输入链接信息，很麻烦，适合暂时的连一下，用一下，通常都会使用终端仿真程序，并保存相关链接信息。</p><h5 id="未安装终端仿真程序链接方式-命令"><a href="#未安装终端仿真程序链接方式-命令" class="headerlink" title="未安装终端仿真程序链接方式-命令"></a>未安装终端仿真程序链接方式-命令</h5><p>  在任意位置打开git命令窗口，输入如下命令即可<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh username@ip_or_domain</div></pre></td></tr></table></figure></p><p>  该命令中username代表linux登录用户的用户名，ip_or_domain代表linux主机的ip地址或ip所映射的域名，例如:<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@116.196.115.151</div></pre></td></tr></table></figure></p><p>  代表的含义是使用root用户链接116.196.115.151的远程主机<br>  之后，一般如果该账户设有密码，会在下一步提示输入链接密码，输入正确密码即可链接成功</p><h5 id="安装SecureCRTPortable链接"><a href="#安装SecureCRTPortable链接" class="headerlink" title="安装SecureCRTPortable链接"></a>安装SecureCRTPortable链接</h5><p>  本地电脑上有SecureCRTPortable这种终端仿真程序（直接浏览器搜索，一堆，本文使用版本为8.3），打开SecureCRTPortable，选择 文件(File)-&gt;快速连接(Quick Connect)，输入主机名和用户名，主机名就是远程linux主机的ip地址，用户名就是登陆的用户名，之后会弹出密码框，要求输入密码，成功后即可链接主机</p><h4 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h4><p> 大部分情况下，我们要在linux下安装的软件，或将要部署在linux环境服务器上的本地开发的应用，他们大部分情况下是在本地windows环境下的，这就涉及到如何将本地文件上传到linux系统中，还有就是在linux下修改一些配置文件非常的繁琐，一般对于比较大的配置文件可能会下载到本地修改，然后在上传覆盖，这就涉及到如何将linux上的文件下载到本地，这里介绍3种方式，个人推荐第三种rz/sz方式</p><h5 id="未安装任何的终端仿真程序-命令"><a href="#未安装任何的终端仿真程序-命令" class="headerlink" title="未安装任何的终端仿真程序-命令"></a>未安装任何的终端仿真程序-命令</h5><h6 id="命令上传"><a href="#命令上传" class="headerlink" title="命令上传:"></a>命令上传:</h6><p>  在本地打开要上传文件所在文件夹，打开该级文件夹下打开git命令窗口，输入如下命令：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp filename username@ip_or_domain:/target_directory/</div></pre></td></tr></table></figure></p><p>   该命令中filename代表要上传的文件名称，username代表linux登录用户的用户名，ip_or_domain代表linux主机的ip地址或ip所映射的域名，target_directory代表linux下要上传到的文件目录,例如:<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp test.sql root@116.196.115.151:/root/</div></pre></td></tr></table></figure></p><p>  代表的含义是将当前目录下的test.sql文件复制上传到116.196.115.151主机的root目录下,如果有密码之后输入密码。</p><h6 id="命令下载"><a href="#命令下载" class="headerlink" title="命令下载:"></a>命令下载:</h6><p>   基本和命令上传相同，在本地先切换到盛放下载文件的目录，在该目录下打开git窗口，输入如下命令<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp username@ip_or_domain:/target_directory/filename ~/</div></pre></td></tr></table></figure></p><p>   该命令中username代表linux登录用户的用户名，ip_or_domain代表linux主机的ip地址或ip所映射的域名，target_directory代表linux下要下载的文件目录，filename代表要下载的文件名称，例如：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp root@116.196.115.151:/root/test.sql  ~/Desktop/</div></pre></td></tr></table></figure></p><p>   代表的含义是将主机root目录下的test.sql文件下载到本地windows的桌面上</p><h6 id="对于目录的上传下载"><a href="#对于目录的上传下载" class="headerlink" title="对于目录的上传下载"></a>对于目录的上传下载</h6><p>   scp命令后面紧接着加上 -r 即可，后面的路径到目录一级即可</p><h6 id="对于两台linux主机之间文件互相拷贝"><a href="#对于两台linux主机之间文件互相拷贝" class="headerlink" title="对于两台linux主机之间文件互相拷贝"></a>对于两台linux主机之间文件互相拷贝</h6><p>   将上述上传或下载命令文件路径部分，在路径前面加上username@ip_or_domain:的前缀即可</p><h5 id="SecureCRTPortable的sftp"><a href="#SecureCRTPortable的sftp" class="headerlink" title="SecureCRTPortable的sftp"></a>SecureCRTPortable的sftp</h5><h6 id="SecureCRTPortable的sftp上传下载公共操作步骤"><a href="#SecureCRTPortable的sftp上传下载公共操作步骤" class="headerlink" title="SecureCRTPortable的sftp上传下载公共操作步骤:"></a>SecureCRTPortable的sftp上传下载公共操作步骤:</h6><ol><li><a href="#安装SecureCRTPortable链接">使用SecureCRTPortable链接到主机</a></li><li>使用快捷键alt+p,进入sftp界面</li><li><p>切换到存放上传文件(要下载的文件)的目录(cd命令)</p><h6 id="SecureCRTPortable的sftp上传"><a href="#SecureCRTPortable的sftp上传" class="headerlink" title="SecureCRTPortable的sftp上传:"></a>SecureCRTPortable的sftp上传:</h6></li><li>直接将本地文件拖拽到sftp界面窗口中即可(像qq发送文件那样，注意尽量使用较高版本   的SecureCRT，否则可能不支持拖拽，例如7.0的版本在win7下可拖拽，win10下不行，8.3的版本都可以)</li><li><p>传输完成后使用ls命令查看当前目录是否有上传的文件(ll命令不可用)</p><h6 id="SecureCRTPortable的sftp下载"><a href="#SecureCRTPortable的sftp下载" class="headerlink" title="SecureCRTPortable的sftp下载:"></a>SecureCRTPortable的sftp下载:</h6><ol><li>使用如下命令将文件下载到本地<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 指定本地下载目录 这里指定为d盘</span></div><div class="line">lcd d:\</div><div class="line"><span class="comment"># 使用get命令下载，后面跟要下载的文件名称(要先切换到文件所在目录)</span></div><div class="line">get test.sql</div></pre></td></tr></table></figure></li></ol></li></ol><h5 id="SecureCRTPortable的Zmodem"><a href="#SecureCRTPortable的Zmodem" class="headerlink" title="SecureCRTPortable的Zmodem"></a>SecureCRTPortable的Zmodem</h5><p>在linux任意目录下输入rz，如果出现 -bash: rz: command not found 说明未安装Zmodem，如果弹出一个文件选择框则已经安装，查看如何使用即可</p><h6 id="安装Zmodem"><a href="#安装Zmodem" class="headerlink" title="安装Zmodem:"></a>安装Zmodem:</h6><p>方式一(简单):执行如下命令，完毕即可使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install lrzsz</div></pre></td></tr></table></figure></p><p>方式二(麻烦):执行如下一系列操作:</p><ol><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 切换到下载目录</span></div><div class="line"><span class="built_in">cd</span> /tmp</div><div class="line"><span class="comment"># 下载</span></div><div class="line">wget http://www.ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz</div></pre></td></tr></table></figure><p>如果出现 wget: command not found，执行下面命令安装wget</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install wget</div></pre></td></tr></table></figure><p>如果出现wget颁发证书过期用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate  http://www.ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz</div></pre></td></tr></table></figure></li><li><p>解压安装及创建软连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar zxvf lrzsz-0.12.20.tar.gz &amp;&amp; <span class="built_in">cd</span> lrzsz-0.12.20</div><div class="line">./configure &amp;&amp; make &amp;&amp; make install</div></pre></td></tr></table></figure><p>如果报错:no acceptable cc found in $PATH<br>执行下面命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc gcc-c++ gcc-g77</div></pre></td></tr></table></figure><p>上面安装过程默认把lsz和lrz安装到了/usr/local/bin/目录下，现在我们并不能直接使用，下面创建软链接，并命名为rz/sz：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/bin</div><div class="line">ln -s /usr/<span class="built_in">local</span>/bin/lrz rz</div><div class="line">ln -s /usr/<span class="built_in">local</span>/bin/lsz sz</div></pre></td></tr></table></figure></li></ol><h6 id="使用Zmodem"><a href="#使用Zmodem" class="headerlink" title="使用Zmodem:"></a>使用Zmodem:</h6><p> 指定上传目录与下载目录<br> 上传目录：使用rz指令，进行上传操作时，弹出的对话框，会默认定位到该目录下。<br> 下载目录：使用sz指令，进行下载操作后，所下载的文件，默认下载到该目录中。<br> 打开SecureCRT软件 -&gt; Options -&gt; session options -&gt; X/Y/Zmodem 下可以设置上传和下载的目录<br> sz filename:发送文件到客户端,zmodem接收可以自行启动，例如：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /root</div><div class="line">sz test.sql</div></pre></td></tr></table></figure></p><p> root下的test.sql文件会被发送到本地下载目录<br> rz :从客户端上传文件到linux服务端,输入该命令后会打开文件选择对话框(默认定位到上传目录)</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h3&gt;&lt;p&gt;本篇博客主要介绍如何去链接远程的linux主机及如何实现本地与远程主机之间文件的上传下载操作，下面的linux系统是CentOS6.6&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://yangshaoxiang.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://yangshaoxiang.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>log4j使用</title>
    <link href="https://yangshaoxiang.github.io/2017/12/09/log4jj%E4%BD%BF%E7%94%A8/"/>
    <id>https://yangshaoxiang.github.io/2017/12/09/log4jj使用/</id>
    <published>2017-12-09T14:44:21.000Z</published>
    <updated>2017-12-10T14:46:11.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-配置效果"><a href="#1-配置效果" class="headerlink" title="1. 配置效果"></a>1. 配置效果</h3><p>下面的log4j日志配置最终能达到的效果是对于全局日志可以根据级别输入到对应级别的日志文件中，注意低级别的日志文件会同时包含高级别的日志信息，例如info级别的日志文件会包含info，warn，error信息，对于一些重要的模块，可以单独输出到独立的文件夹文件中，同时对单独模块也可以像全局日志那样根据日志级别输入到对应文件中 也可以配置该模块日志信息是否同时输入到全局日志中<br><a id="more"></a></p><h3 id="2-样板Log4j配置示例"><a href="#2-样板Log4j配置示例" class="headerlink" title="2. 样板Log4j配置示例"></a>2. 样板Log4j配置示例</h3><p>这段配置的效果是配置3个全局的输出目的地，分别输出到控制台，和两个文件中，控制台的输出级别是info，两个文件的输出级别分别是info和error，配置一个login(登录)模块的日志输出到文件中，并且配置该模块日志信息不输出到全局日志中，在该模块中日志同样按照级别输出到不同文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">log4j.rootLogger=DEBUG,console, infofile, errorfile</div><div class="line"></div><div class="line">#日志文件输出目录</div><div class="line">basedir=$&#123;catalina.home&#125;/logs/basemvc</div><div class="line">#登录模块日志输出目录</div><div class="line">logindir=$&#123;basedir&#125;/login</div><div class="line"></div><div class="line">#控制台日志-输出info以上</div><div class="line">log4j.appender.console=org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.console.Threshold=info</div><div class="line">log4j.appender.console.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.console.layout.ConversionPattern=%d&#123;yyyy-MM-ddHH\:mm\:ss&#125;[%-5p]%m%n%n</div><div class="line"></div><div class="line">#文件中info级别以上日志</div><div class="line">log4j.appender.infofile=org.apache.log4j.DailyRollingFileAppender</div><div class="line">log4j.appender.infofile.Append=true</div><div class="line">log4j.appender.infofile.DatePattern=&apos;.&apos;yyyy-MM-dd</div><div class="line">log4j.appender.infofile.File=$&#123;basedir&#125;/info.log</div><div class="line">log4j.appender.infofile.Threshold=info</div><div class="line">log4j.appender.infofile.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.infofile.layout.ConversionPattern=%d&#123;yyyy-MM-ddHH\:mm\:ss&#125;[%-5p]%m%n%n</div><div class="line"></div><div class="line">#文件中error级别以上日志</div><div class="line">log4j.appender.errorfile=org.apache.log4j.DailyRollingFileAppender</div><div class="line">log4j.appender.errorfile.Append=true</div><div class="line">log4j.appender.errorfile.DatePattern=&apos;.&apos;yyyy-MM-dd</div><div class="line">log4j.appender.errorfile.File=$&#123;basedir&#125;/error.log</div><div class="line">log4j.appender.errorfile.Threshold=ERROR</div><div class="line">log4j.appender.errorfile.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.errorfile.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH\:mm\:ss&#125; [%-5p] %m%n%n</div><div class="line"></div><div class="line">#--------------------以下login模块相关日志--------------------</div><div class="line">#login模块输出</div><div class="line">#INFO及以上级别的log进行输出</div><div class="line">log4j.logger.login=INFO,logininfofile,loginerrorfile</div><div class="line"></div><div class="line">#login模块文件中存储info级别以上日志        </div><div class="line">log4j.appender.logininfofile.Threshold=INFO</div><div class="line">#以文件类型输出</div><div class="line">log4j.appender.logininfofile=org.apache.log4j.DailyRollingFileAppender</div><div class="line">#输出路径</div><div class="line">log4j.appender.logininfofile.File=$&#123;logindir&#125;/info_login.log</div><div class="line">#配置文件输出的文件命名，这种格式文件会在凌晨生成一个文件，想在其他时间生成新文件可以查看DatePattern的相关配置</div><div class="line">log4j.appender.logininfofile.DatePattern=&apos;_&apos;yyyy-MM-dd&apos;.log&apos;</div><div class="line">#输出格式</div><div class="line">log4j.appender.logininfofile.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.logininfofile.layout.ConversionPattern=%d %p [%c] - %m%n</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#login模块文件中存储error级别以上日志</div><div class="line">log4j.appender.loginerrorfile.Threshold=ERROR</div><div class="line">#以文件类型输出</div><div class="line">log4j.appender.loginerrorfile=org.apache.log4j.DailyRollingFileAppender</div><div class="line">#输出路径</div><div class="line">log4j.appender.loginerrorfile.File=$&#123;logindir&#125;/error_login.log</div><div class="line">#配置文件输出的文件命名，这种格式文件会在凌晨生成一个文件，想在其他时间生成新文件可以查看DatePattern的相关配置</div><div class="line">log4j.appender.loginerrorfile.DatePattern=&apos;_&apos;yyyy-MM-dd&apos;.log&apos;</div><div class="line">#输出格式</div><div class="line">log4j.appender.loginerrorfile.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.loginerrorfile.layout.ConversionPattern=%d %p [%c] - %m%n</div><div class="line"></div><div class="line">#设置这个子Logger输出日志不在父级别logger里面输出</div><div class="line">log4j.additivity.login=false</div><div class="line"></div><div class="line">#--------------------以上login模块相关日志--------------------</div></pre></td></tr></table></figure></p><h3 id="3-配置简要解释"><a href="#3-配置简要解释" class="headerlink" title="3. 配置简要解释"></a>3. 配置简要解释</h3><h4 id="3-1-关于全局日志的配置"><a href="#3-1-关于全局日志的配置" class="headerlink" title="3.1 关于全局日志的配置"></a>3.1 关于全局日志的配置</h4><ol><li><p>关于日志的输出级别<br> log4j日志级别分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别。Log4j建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG。通过在配置文件中配置，可以控制到应用程序中相应级别的日志信息的开关。比如在配置文件中定义了log4j.rootLogger为INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来，也是说大于等于的级别的日志才输出。</p></li><li><p>全局日志配置 log4j.rootLogger<br> 这个是用来定义日志全局的输出级别以及输出的目的地，这里我定义的是log4j.rootLogger=info, console, infofile, errorfile,这里定义了全局输出的日志为INFO级别，也就是说能输出的日志级别一定不低于INFO级别，即DEBUG级别的日志将不会输出，输出到哪呢?输出到紧接其后定义的目的地 console, infofile, errorfile，这个3个目的地可以随意命名，在每个目的地中可以具体细化日志的配置，即他们可以再次对日志的级别进行过滤，对日志输出格式进行细化，对日志输出端类型进行指定。</p></li><li><p>指定日志输出目的地中输出端 log4j.appender.目的地名称<br> 就是配置输出到这个目的地的日志，他是在控制台中输出，还是以文件的形式输出，如果以文件的形式输出，那么其文件产生时机是什么时候，目的地有如下几种配置:</p><blockquote><p>org.apache.log4j.ConsoleAppender（控制台）<br>org.apache.log4j.FileAppender（文件）<br>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）<br>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）<br>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）  </p></blockquote></li><li><p>指定日志输出目的地中日志输出级别 log4j.appender.interceptor.Threshold<br>通过该属性可以指定目的地中日志输出的级别，相当于对全局配置的日志级别再次做一次过滤</p></li></ol><h4 id="3-2-关于单独模块日志配置"><a href="#3-2-关于单独模块日志配置" class="headerlink" title="3.2 关于单独模块日志配置"></a>3.2 关于单独模块日志配置</h4><ol><li><p>log4j.logger.login.模块名<br>这一句配置相当于新添了一个日志模块，他的值与rootLogger代表意义相同，即指定相对该模块下全局日志级别及对应的输出目的地，其余对应目的地的配置和全局日志相同</p></li><li><p>log4j.additivity.模块名<br>设置这个子Logger输出日志是否在父级别logger里面输出，true表示同时在父级的日志输出，这里的模块名可以换为模块下的目的地名称，效果是一样的</p></li></ol><h3 id="4-java中使用日志"><a href="#4-java中使用日志" class="headerlink" title="4. java中使用日志"></a>4. java中使用日志</h3><p>   对于在java中使用，单独日志模块要想独立输出获取日志对象时在方法参数中要传入模块名称，对于全局日志对象只需传入当前类的class对象即可，代码示例如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> </span>&#123;</div><div class="line">    <span class="comment">//登录模块使用的日志对象</span></div><div class="line">    <span class="keyword">private</span> Logger loginLogger = Logger.getLogger(<span class="string">"login"</span>);</div><div class="line">    <span class="comment">//全局日志对象</span></div><div class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(UserAction.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detail</span><span class="params">()</span></span>&#123;</div><div class="line">        logger.debug(<span class="string">"user_product----"</span>+<span class="string">"debug"</span>);</div><div class="line">        logger.info(<span class="string">"user_product----"</span>+<span class="string">"info"</span>);</div><div class="line">        logger.warn(<span class="string">"user_product----"</span>+<span class="string">"warn"</span>);</div><div class="line">        logger.error(<span class="string">"user_product----"</span>+<span class="string">"error"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</div><div class="line">        loginLogger.debug(<span class="string">"user_product----"</span>+<span class="string">"debug"</span>);</div><div class="line">        loginLogger.info(<span class="string">"user_product----"</span>+<span class="string">"info"</span>);</div><div class="line">        loginLogger.warn(<span class="string">"user_product----"</span>+<span class="string">"warn"</span>);</div><div class="line">        loginLogger.error(<span class="string">"user_product----"</span>+<span class="string">"error"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-配置效果&quot;&gt;&lt;a href=&quot;#1-配置效果&quot; class=&quot;headerlink&quot; title=&quot;1. 配置效果&quot;&gt;&lt;/a&gt;1. 配置效果&lt;/h3&gt;&lt;p&gt;下面的log4j日志配置最终能达到的效果是对于全局日志可以根据级别输入到对应级别的日志文件中，注意低级别的日志文件会同时包含高级别的日志信息，例如info级别的日志文件会包含info，warn，error信息，对于一些重要的模块，可以单独输出到独立的文件夹文件中，同时对单独模块也可以像全局日志那样根据日志级别输入到对应文件中 也可以配置该模块日志信息是否同时输入到全局日志中&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangshaoxiang.github.io/categories/java/"/>
    
    
      <category term="日志" scheme="https://yangshaoxiang.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="log4j" scheme="https://yangshaoxiang.github.io/tags/log4j/"/>
    
  </entry>
  
  <entry>
    <title>Activemq的安装及启动</title>
    <link href="https://yangshaoxiang.github.io/2017/10/20/Activemq%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%90%AF%E5%8A%A8/"/>
    <id>https://yangshaoxiang.github.io/2017/10/20/Activemq的安装及启动/</id>
    <published>2017-10-19T17:05:08.000Z</published>
    <updated>2017-12-10T07:23:30.776Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本了解"><a href="#1-基本了解" class="headerlink" title="1. 基本了解"></a>1. 基本了解</h3><p>&emsp;&emsp;这一部分内容主要来源网络，这里整理归纳到博客中，阅读之后对ActiveMq有一个基本的认知和了解。<br> &emsp; <strong>1. ActiveMQ概念</strong><br>&emsp;&emsp;ActiveMQ是Apache推出的，一款开源的，完全支持JMS1.1和J2EE 1.4规范的JMSProvider实现的消息中间件（Message Oriented Middleware，MOM）。<br><a id="more"></a><br>&emsp; <strong>2. ActiveMQ作用</strong><br>&emsp;&emsp;最主要的功能就是：实现JMS Provider，用来帮助实现高可用、高性能、可伸缩、易用和安全的企业级面向消息服务的系统。</p><p>&emsp; <strong>3. ActiveMQ特点</strong></p><ul><li>完全支持JMS1.1和J2EE 1.4规范 （持久化，XA消息，事务)  </li><li>支持多种传送协议：in-VM,TCP,SSL,NIO,UDP,JGroups,JXTA  </li><li>可插拔的体系结构，可以灵活定制，如：消息存储方式、安全管理等  </li><li>很容易和Application Server集成使用</li><li>多种语言和协议编写客户端。语言: Java,C,C++,C#,Ruby,Perl,Python,PHP</li><li>从设计上保证了高性能的集群，客户端-服务器，点对点</li><li>可以很容易的和Spring结合使用</li><li>支持通过JDBC和journal提供高速的消息持久化</li></ul><h3 id="2-基本安装和配置"><a href="#2-基本安装和配置" class="headerlink" title="2. 基本安装和配置"></a>2. 基本安装和配置</h3><p>&emsp;&emsp;这一部分阅读后了解activemq在windows和linux下的安装和基本配置。<br>&emsp;&emsp;<strong>windows下activemq的安装</strong><br>&emsp;&emsp;1.到官网<a href="http://activemq.apache.org/download.html" target="_blank" rel="external">下载activemq</a>，windows下下载zip包，linux下下载gz包，这里下载的是5.15.0的版本。<br>&emsp;&emsp;2.解压到任意目录，但是看官网说如果文件路径过长可能会有问题，为求稳妥，目录不要放的过深。<br>&emsp;&emsp;3.到activimq解压目录下的bin目录中的win64去运行activemq.bat(我的电脑是win7 64位)，直接运行bin目录下的activemq.bat我的会直接闪退,注意activemq的启动需要jdk的环境。<br>&emsp;&emsp;4.启动成功后，在浏览器中输入:<a href="http://localhost:8161/admin/" target="_blank" rel="external">http://localhost:8161/admin/</a> 打开activemq的管控台，用户名和密码默认都是admin，登陆进去后可看到管控界面。<br>&emsp;&emsp;<strong>windows下activemq的简单配置</strong><br>&emsp;&emsp;1.管控台密码配置，也就是上面输入的admin<br>&emsp;&emsp;&emsp;&emsp;在安装目录下的<code>conf/jetty.xml</code>中有如下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityConstraint"</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.util.security.Constraint"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"BASIC"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"roles"</span> <span class="attr">value</span>=<span class="string">"admin"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p><p>&emsp;&emsp;&emsp;&emsp;确保 authenticate 的值为true(默认就为true)<br>&emsp;&emsp;&emsp;&emsp;控制台的登录用户名密码保存在<code>conf/jetty-realm.properties</code>文件中,内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Defines users that can access the web (console, demo, etc.)</div><div class="line"># username: password [,rolename ...]</div><div class="line">#用户名 : 密码 ,角色名</div><div class="line">admin: newpwd, admin</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;2.安全配置（消息安全）<br>&emsp;&emsp;&emsp;&emsp;ActiveMQ 如果不加入安全机制的话，任何人只要知道消息服务的具体地址(包括 ip，端口，消息地址[队列或者主题地址])，就可以任意的发送、接收消息。关于 ActiveMQ 的安全可以参考官方的<a href="http://activemq.apache.org/security.html" target="_blank" rel="external">安全配置方式</a>,我们这里使用配置简单授权方式:<br>&emsp;&emsp;&emsp;&emsp;在 <code>conf/activemq.xml</code> 文件中在 broker 标签最后加入以下内容即可：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">simpleAuthenticationPlugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">authenticationUser</span> <span class="attr">username</span>=<span class="string">"yourname"</span> <span class="attr">password</span>=<span class="string">"yourpwd"</span> <span class="attr">groups</span>=<span class="string">"users,admins"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">simpleAuthenticationPlugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure></p><p>&emsp;&emsp;&emsp;&emsp;这里定义用户名为 yourname，密码为 yourpwd，角色为 users,admins,如果这里做了配置，那么在编写客户端创建连接工厂时需要指定用户名和密码，在之后的代码中会注释说明。注意配置了这个之后，浏览器的控制台就无法查看该队列的信息了(我这里是无法查看了)  </p><p>&emsp;&emsp;<strong>linux(CentOS)下activemq的安装</strong><br>&emsp;&emsp;1.到官网<a href="http://activemq.apache.org/download.html" target="_blank" rel="external">下载activemq</a>，windows下下载zip包，linux下下载gz包，这里下载的是5.15.0的版本。<br>&emsp;&emsp;2.将下载的gz包上传至linux系统中，也可以直接在linux的存放目录下直接下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://59.109.99.40/IXC492c5648ba8654fcfe0e8dd805738eb4/apache//activemq/5.15.1/apache-activemq-5.15.1-bin.tar.gz</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;3.解压安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf apache-activemq-5.15.1-bin.tar.gz</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;4.启动执行:进入解压后的目录的bin目录中，如果启动脚本 activemq 没有可执行权限，此时则需要授权，执行如下命令即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 755 ./activemq</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;5.防火墙中打开对应的端口:ActiveMQ 需要用到两个端口,<br>一个是消息通讯的端口（默认为 61616）,<br>一个是管理控制台端口（默认为 8161）可在 <code>conf/jetty.xml</code> 中修改，默认如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jettyPort"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.web.WebConsolePort"</span> <span class="attr">init-method</span>=<span class="string">"start"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- the default port number for the web console --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"0.0.0.0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"8161"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p><p>&emsp;&emsp;在防火墙中添加端口命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysconfig/iptables</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;在文件中添加如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 61616 -j ACCEPT</div><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 8161 -j ACCEPT</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;重启防火墙，启动ActiveMQ<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service iptables restart</div><div class="line">./activemq start</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;在浏览器上访问:<a href="http://linux的IP地址:8161" target="_blank" rel="external">http://linux的IP地址:8161</a>  用户名及密码默认都为admin</p><p>&emsp;&emsp;<strong>linux下activemq配置和说明同windows相同</strong><br>&emsp;&emsp;1.管控台密码配置，也就是进入网页管控台时输入的admin<br>&emsp;&emsp;&emsp;&emsp;在安装目录下的<code>conf/jetty.xml</code>中有如下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityConstraint"</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.util.security.Constraint"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"BASIC"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"roles"</span> <span class="attr">value</span>=<span class="string">"admin"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p><p>&emsp;&emsp;&emsp;&emsp;确保 authenticate 的值为true(默认就为true)<br>&emsp;&emsp;&emsp;&emsp;控制台的登录用户名密码保存在<code>conf/jetty-realm.properties</code>文件中,要执行的命令及文件内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ../</div><div class="line">vi conf/jetty-realm.properties</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Defines users that can access the web (console, demo, etc.)</div><div class="line"># username: password [,rolename ...]</div><div class="line">#用户名 : 密码 ,角色名</div><div class="line">admin: newpwd, admin</div></pre></td></tr></table></figure><p>&emsp;&emsp;2.安全配置（消息安全）<br>&emsp;&emsp;&emsp;&emsp;ActiveMQ 如果不加入安全机制的话，任何人只要知道消息服务的具体地址(包括 ip，端口，消息地址[队列或者主题地址])，就可以任意的发送、接收消息。关于 ActiveMQ 的安全可以参考官方的<a href="http://activemq.apache.org/security.html" target="_blank" rel="external">安全配置方式</a>,我们这里使用配置简单授权方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi conf/activemq.xml</div></pre></td></tr></table></figure></p><p>  &emsp;&emsp;为了activeMQ的消息安全性在 <code>conf/activemq.xml</code> 文件中的 broker 标签最后加入以下内容后保存退出(按esc键,按shift+:键,输入wq,按enter键)：<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">simpleAuthenticationPlugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">authenticationUser</span> <span class="attr">username</span>=<span class="string">"yourname"</span> <span class="attr">password</span>=<span class="string">"yourpwd"</span> <span class="attr">groups</span>=<span class="string">"users,admins"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">simpleAuthenticationPlugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure></p><p> &emsp;&emsp;这里定义用户名为 yourname，密码为 yourpwd，角色为 users,admins,如果这里做了配置，那么在编写客户端创建连接工厂时需要指定用户名和密码，在之后的代码中会注释说明。注意配置了这个之后，浏览器的控制台就无法查看该队列的信息了(我这里是无法查看了)    </p><p> &emsp;&emsp;以上关于ActiveMQ的在windows和linux环境下的安装及简单配置，整理完收工。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-基本了解&quot;&gt;&lt;a href=&quot;#1-基本了解&quot; class=&quot;headerlink&quot; title=&quot;1. 基本了解&quot;&gt;&lt;/a&gt;1. 基本了解&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这一部分内容主要来源网络，这里整理归纳到博客中，阅读之后对ActiveMq有一个基本的认知和了解。&lt;br&gt; &amp;emsp; &lt;strong&gt;1. ActiveMQ概念&lt;/strong&gt;&lt;br&gt;&amp;emsp;&amp;emsp;ActiveMQ是Apache推出的，一款开源的，完全支持JMS1.1和J2EE 1.4规范的JMSProvider实现的消息中间件（Message Oriented Middleware，MOM）。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangshaoxiang.github.io/categories/java/"/>
    
    
      <category term="中间件" scheme="https://yangshaoxiang.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="ActiveMQ" scheme="https://yangshaoxiang.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>java后台常用json解析工具问题小结</title>
    <link href="https://yangshaoxiang.github.io/2017/10/20/java%E5%90%8E%E5%8F%B0%E5%B8%B8%E7%94%A8json%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%E9%97%AE%E9%A2%98%E5%B0%8F%E7%BB%93/"/>
    <id>https://yangshaoxiang.github.io/2017/10/20/java后台常用json解析工具问题小结/</id>
    <published>2017-10-19T17:05:08.000Z</published>
    <updated>2018-01-25T15:00:30.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h3><p>  问题基本是关于java对象转json时，非规范的java成员变量名引起的问题，这里不细究造成这些问题的底层原因，只是单纯的描述我碰到的问题及对应的解决方法<br>  <a id="more"></a></p><h3 id="jackson将java对象转json字符串字段字母小写问题"><a href="#jackson将java对象转json字符串字段字母小写问题" class="headerlink" title="jackson将java对象转json字符串字段字母小写问题"></a>jackson将java对象转json字符串字段字母小写问题</h3><p>  在使用springmvc框架作为后台控制层层的框架时，我们都知道当前台发送ajax请求后台要返回一个json字符串时，我们要做3件事</p><ol><li>引入jackson相关jar包</li><li>springmvc配置文件配置相关json转换配置</li><li>Controller层的方法上加上@Response注解，方法返回值为对象  </li></ol><p>这样当我们完成第三步，返回java对象之后，springmvc使用jackson将我们的对象转为json返回给前台，一般情况下是任何问题都不会发生的，但是当我们返回的java对象，他的成员变量不符合java驼峰命名规范时，会出现问题，例如当成员变量名全部大写，转化的json对应字段却是小写</p><p>java类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//不符合变量命名规范的java类</span></div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellPoint</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String WT;</div><div class="line">    <span class="keyword">private</span> String ZT;</div><div class="line">      <span class="comment">//get/set ......略</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">//加注解之后的java类</span></div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellPoint</span> </span>&#123;</div><div class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"WT"</span>)</div><div class="line">    <span class="keyword">private</span> String WT;</div><div class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"ZT"</span>)</div><div class="line">    <span class="keyword">private</span> String ZT;</div><div class="line">     <span class="comment">//get/set 方法加@JsonIgnore</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>转化为json后<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//不符合变量命名规范的java类转化的json</div><div class="line">"sellPoint": &#123;</div><div class="line">  "wt": "送20M宽带加电信电视（省内流量不限量，路由器、2部机顶盒免费送，预存400元）",</div><div class="line">  "zt": "送2T云存储空间；机顶盒免费用"</div><div class="line">&#125;</div><div class="line"></div><div class="line">//加完注解后正常的json</div><div class="line">"sellPoint": &#123;</div><div class="line">  "WT": "送20M宽带加电信电视（省内流量不限量，路由器、2部机顶盒免费送，预存400元）",</div><div class="line">  "ZT": "送2T云存储空间；机顶盒免费用"</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>解决方案:  </p><ol><li>在不规范的成员变量字段上加JsonProperty(“期望的变量名称”)注解</li><li>在对应的get/set方法上添加@JsonIgnore注解，忽略正常的转化</li></ol><p>注意：如果不在get/set方法加@JsonIgnore注解，会生成两份json属性，如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">"sellPoint": &#123;</div><div class="line">  "wt": "送20M宽带加电信电视（省内流量不限量，路由器、2部机顶盒免费送，预存400元）",</div><div class="line">  "zt": "送2T云存储空间；机顶盒免费用",</div><div class="line">  "WT": "送20M宽带加电信电视（省内流量不限量，路由器、2部机顶盒免费送，预存400元）",</div><div class="line">  "ZT": "送2T云存储空间；机顶盒免费用"</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="fastjson将对象转化为json字符串首字母小写问题-未实践"><a href="#fastjson将对象转化为json字符串首字母小写问题-未实践" class="headerlink" title="fastjson将对象转化为json字符串首字母小写问题(未实践)"></a>fastjson将对象转化为json字符串首字母小写问题(未实践)</h3><p>解决方案一:<br>在Controller或service中初始化fastjson的一个参数（高版本(2.X)fastjson已经不适用）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span>&#123;</div><div class="line">   TypeUtils.compatibleWithJavaBean = <span class="keyword">true</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p><p>解决方案二:<br>新建fastjson.properties，添加如下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fastjson.compatibleWithJavaBean=true</div></pre></td></tr></table></figure></p><p>解决方案三：<br>在对应字段上加@JSONField注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加注解之后的java类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellPoint</span> </span>&#123;</div><div class="line">  <span class="meta">@JSONField</span>(<span class="string">"WT"</span>)</div><div class="line">  <span class="keyword">private</span> String WT;</div><div class="line">  <span class="meta">@JSONField</span>(<span class="string">"ZT"</span>)</div><div class="line">  <span class="keyword">private</span> String ZT;</div><div class="line">   <span class="comment">//get/set 忽略</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ps:net.sf.json将对象转化为json不会出现属性名称问题</p><h3 id="net-sf-json的NoSuchMethodException-Unknown-property-XXXX"><a href="#net-sf-json的NoSuchMethodException-Unknown-property-XXXX" class="headerlink" title="net.sf.json的NoSuchMethodException: Unknown property XXXX"></a>net.sf.json的NoSuchMethodException: Unknown property XXXX</h3><p>这个错是使用net.sf.json将json字符串转化为java对象时出现，出现的原因是Json字符串属性过多，没有对应上javaBean的属性，所以程序会抛异常没有对应的属性。<br>解决方案是写一个属性过滤器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  JsonConfig config = <span class="keyword">new</span> JsonConfig();</div><div class="line">config.setJavaPropertyFilter(<span class="keyword">new</span> PropertyFilter()&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(Object paramObject1, String paramString,</span></span></div><div class="line"><span class="function"><span class="params">Object paramObject2)</span> </span>&#123;</div><div class="line">      <span class="comment">//这里设置要过滤的属性</span></div><div class="line"><span class="keyword">if</span>(paramString.equals(<span class="string">"xxx"</span>)||paramString.equals(<span class="string">"xxxx"</span>))&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;&#125;);</div></pre></td></tr></table></figure></p><p>这种方式可以参考<a href="https://my.oschina.net/heweipo/blog/368116" target="_blank" rel="external">这篇博客</a><br>我的json属性过多最终没有采用net.sf.json，使用了fastjson，他在json转java中，对于json中一些java没有的属性自动进行忽略</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题概述&quot;&gt;&lt;a href=&quot;#问题概述&quot; class=&quot;headerlink&quot; title=&quot;问题概述&quot;&gt;&lt;/a&gt;问题概述&lt;/h3&gt;&lt;p&gt;  问题基本是关于java对象转json时，非规范的java成员变量名引起的问题，这里不细究造成这些问题的底层原因，只是单纯的描述我碰到的问题及对应的解决方法&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangshaoxiang.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://yangshaoxiang.github.io/tags/java/"/>
    
      <category term="json" scheme="https://yangshaoxiang.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>maven私服nexus3.x搭建与使用</title>
    <link href="https://yangshaoxiang.github.io/2017/04/11/maven%E7%A7%81%E6%9C%8Dnexus3.x%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://yangshaoxiang.github.io/2017/04/11/maven私服nexus3.x搭建与使用/</id>
    <published>2017-04-10T17:05:08.000Z</published>
    <updated>2019-04-26T06:31:44.607Z</updated>
    
    <content type="html"><![CDATA[<p>搭建maven私服主要是为了方便在一个团队中使用maven中央仓库没有的jar包，这些非中央仓库的jar包可能是自己团队开发的公共依赖jar包，可能是第三方私有的认证相关jar包，特殊的还有oracle的驱动jar包，下面是使用Nexus搭建maven私服及私服使用<br><a id="more"></a></p><h3 id="Nexus3-x安装及配置"><a href="#Nexus3-x安装及配置" class="headerlink" title="Nexus3.x安装及配置"></a>Nexus3.x安装及配置</h3><p>前置条件要求存在jdk1.8的环境</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>这里之所以要特地提下下载是因为这个东西是真难下，我的电脑本身一直没有安装过专门的下载工具(度盘不算)，一般下载都是走网盘或者浏览器直接下载，这次无论度盘的离线下载还是浏览器下载都非常慢甚至下载失败(100M光纤)，在服务器上使用wget同样很慢，最后安装了迅雷使用迅雷下载后速度快很多，看来下载确实需要专业的下载工具，下载完成后上传到服务器上即可，当然也可以直接在服务器上使用wget下载，如果不嫌弃下载的慢的话:  </p><p>官方下载页：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://www.sonatype.com/download-oss-sonatype</div></pre></td></tr></table></figure></p><p>实际资源地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://sonatype-download.global.ssl.fastly.net/repository/repositoryManager/3/nexus-3.10.0-04-unix.tar.gz</div></pre></td></tr></table></figure></p><h4 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#解压</div><div class="line"> tar -zvxf nexus-3.10.0-04-unix.tar.gz</div><div class="line">#解压的文件夹移到nexus(自动创建)</div><div class="line">mv nexus-3.10.0-04/ /usr/local/nexus</div><div class="line">mv sonatype-work/ nexus/</div><div class="line"></div><div class="line"></div><div class="line">#防火墙开启8081端口，该端口是nexus的默认端口(在/usr/local/nexus/etc/nexus-default.properties文件中)</div><div class="line">vi  /etc/sysconfig/iptables</div><div class="line"># 在打开的文件中加入如下内容</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8081 -j ACCEPT</div><div class="line"></div><div class="line">#启动 ps 我安装时第一次启动使用./nexus start 访问不到web页面，使用run命令可以，之后使用start也可以了</div><div class="line">./nexus run &amp;</div><div class="line"></div><div class="line">#启动成功会有如下信息</div><div class="line">WARNING: ************************************************************</div><div class="line">WARNING: Detected execution as &quot;root&quot; user.  This is NOT recommended!</div><div class="line">WARNING: ************************************************************</div><div class="line">Starting nexus</div></pre></td></tr></table></figure><p>上面启动成功后会警告不要使用root用户启动，这里可以新建一个用户，也可以指定root用户启动，使他不出现警告，下面配置指定root用户启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#该文件在bin目录下和启动程序nexus同级</div><div class="line">vi nexus.rc</div><div class="line">run_as_user=root</div></pre></td></tr></table></figure></p><h4 id="手动更新索引-可选"><a href="#手动更新索引-可选" class="headerlink" title="手动更新索引(可选)"></a>手动更新索引(可选)</h4><p>我这里没有下载索引，以前配置过nenus2.x时下载过全部索引，很大很慢，下载了一晚上，不下载索引并不影响使用，这里会同步当前项目使用的依赖到私服的索引中，有新的依赖从私服中获取也会更新对应的索引，下面介绍一种离线安装的方式  </p><ol><li><p>前往maven中央仓库下载 <a href="http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.apache.maven.indexer%22%20AND%20a%3A%22indexer-cli%22" target="_blank" rel="external">indexer-cli-5.1.1.jar</a> 解压工具包</p></li><li><p>下载离线<a href="http://repo.maven.apache.org/maven2/.index/" target="_blank" rel="external">索引文件</a></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nexus-maven-repository-index.gz</div><div class="line">nexus-maven-repository-index.properties</div></pre></td></tr></table></figure></li><li><p>将3个文件放在同一目录下解压</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar indexer-cli-5.1.1.jar -u nexus-maven-repository-index.gz -d indexer</div></pre></td></tr></table></figure></li><li><p>拷贝索引<br>nexus2.x拷贝到{nexus-home}/sonatype-work/nexus/indexer/central-ctx<br>nexus3.x拷贝到/sonatype-work/nexus3/blobs/default，3.x我没尝试过参考<a href="https://blog.csdn.net/lusyoe/article/details/52821088" target="_blank" rel="external">这篇博客</a></p></li></ol><h4 id="web界面"><a href="#web界面" class="headerlink" title="web界面"></a>web界面</h4><ol><li>访问web界面，使用默认管理账号admin/admin123登录<br><a href="http://192.168.16.30:8081/" target="_blank" rel="external">http://192.168.16.30:8081/</a>  </li><li><p>仓库浏览在左侧菜单栏Browse,这里有多种仓库，相比于nexus2.x精简了很多仓库</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">nexus仓库类型  </div><div class="line">Group：这是一个仓库聚合的概念，用户仓库地址选择Group的地址，即可访问Group中配置的</div><div class="line">所有仓库资源，访问顺序取决于配置顺序3.x默认Releases，Snapshots，Central，可在web页面配置</div><div class="line">在web界面点开  </div><div class="line"></div><div class="line">Hosted:私有仓库，专门用来存储我们自己生成的jar文件  </div><div class="line">   3rd party：未发布到公网的第三方jar (3.x去除了)</div><div class="line">   Snapshots：本地项目的快照仓库  </div><div class="line">   Releases： 本地项目发布的正式版本  </div><div class="line"></div><div class="line">Proxy:公网上发布的jar 例如：spring</div><div class="line">  Central：中央仓库</div><div class="line">  Apache Snapshots：Apache专用快照仓库(3.x去除了)</div></pre></td></tr></table></figure></li><li><p>配置Releases版本可重复上传  </p><p>  点击图片画框部分配置Releases: Deployment pollcy –&gt; Allow redeploy</p><p> <img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180409/JchA2DjJ8k.png?imageslim" alt="mark"></p></li></ol><h3 id="使用nenus本地maven配置"><a href="#使用nenus本地maven配置" class="headerlink" title="使用nenus本地maven配置"></a>使用nenus本地maven配置</h3><h4 id="全局配置下载依赖-即项目pom无需配置"><a href="#全局配置下载依赖-即项目pom无需配置" class="headerlink" title="全局配置下载依赖(即项目pom无需配置)"></a>全局配置下载依赖(即项目pom无需配置)</h4><p>在maven的setting.xml文件中配置私服配置，这种方式配置后所有本地使用该配置的maven项目的pom文件都无需配置私服下载相关配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;profiles&gt;</div><div class="line">  &lt;profile&gt;</div><div class="line">     &lt;id&gt;mycof&lt;/id&gt;</div><div class="line">        &lt;repositories&gt;</div><div class="line">        &lt;!-- 私有库地址--&gt;</div><div class="line">          &lt;repository&gt;</div><div class="line">          &lt;id&gt;nexus&lt;/id&gt;</div><div class="line">          &lt;url&gt;http://192.168.16.30:8081/repository/maven-public/&lt;/url&gt;</div><div class="line">          &lt;releases&gt;</div><div class="line">            &lt;enabled&gt;true&lt;/enabled&gt;</div><div class="line">          &lt;/releases&gt;</div><div class="line">          &lt;snapshots&gt;</div><div class="line">            &lt;enabled&gt;true&lt;/enabled&gt;</div><div class="line">          &lt;/snapshots&gt;</div><div class="line">        &lt;/repository&gt;</div><div class="line">      &lt;/repositories&gt;      </div><div class="line">      &lt;pluginRepositories&gt;</div><div class="line">        &lt;!--插件库地址--&gt;</div><div class="line">        &lt;pluginRepository&gt;</div><div class="line">          &lt;id&gt;nexus&lt;/id&gt;</div><div class="line">          &lt;url&gt;http://192.168.16.30:8081/repository/maven-public/&lt;/url&gt;</div><div class="line">          &lt;releases&gt;</div><div class="line">            &lt;enabled&gt;true&lt;/enabled&gt;</div><div class="line">          &lt;/releases&gt;</div><div class="line">          &lt;snapshots&gt;</div><div class="line">            &lt;enabled&gt;true&lt;/enabled&gt;</div><div class="line">           &lt;/snapshots&gt;</div><div class="line">        &lt;/pluginRepository&gt;</div><div class="line">      &lt;/pluginRepositories&gt;</div><div class="line">    &lt;/profile&gt;</div></pre></td></tr></table></figure><p>激活使用上面的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!--激活profile--&gt;</div><div class="line">&lt;activeProfiles&gt;</div><div class="line">  &lt;activeProfile&gt;mycof&lt;/activeProfile&gt;</div><div class="line">&lt;/activeProfiles&gt;</div></pre></td></tr></table></figure></p><p>指定镜像代理为我们的私服<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;mirror&gt;</div><div class="line">  &lt;id&gt;nexus-myself&lt;/id&gt;</div><div class="line">  &lt;!--*指的是访问任何仓库都使用我们的私服--&gt;</div><div class="line">  &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</div><div class="line">  &lt;name&gt;Nexus myself&lt;/name&gt;</div><div class="line">  &lt;url&gt;http://192.168.16.30:8081/repository/maven-public/&lt;/url&gt;</div><div class="line">&lt;/mirror&gt;</div></pre></td></tr></table></figure></p><h4 id="单独项目下载依赖-即项目pom文件中配置"><a href="#单独项目下载依赖-即项目pom文件中配置" class="headerlink" title="单独项目下载依赖(即项目pom文件中配置)"></a>单独项目下载依赖(即项目pom文件中配置)</h4><p>这种配置是修改单个项目的pom文件，无需修改maven的setting配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;repositories&gt;</div><div class="line">  &lt;repository&gt;</div><div class="line">    &lt;id&gt;nexus&lt;/id&gt;</div><div class="line">    &lt;url&gt;http://192.168.16.30:8081/repository/maven-public/&lt;/url&gt;</div><div class="line">    &lt;releases&gt;</div><div class="line">      &lt;enabled&gt;true&lt;/enabled&gt;</div><div class="line">    &lt;/releases&gt;</div><div class="line">    &lt;snapshots&gt;</div><div class="line">    &lt;enabled&gt;true&lt;/enabled&gt;</div><div class="line">    &lt;/snapshots&gt;</div><div class="line">  &lt;/repository&gt;</div><div class="line">&lt;/repositories&gt;</div></pre></td></tr></table></figure></p><p>建议使用全局的setting配置，一个项目组共用一个maven的setting配置，项目中就无需配置下载相关的私服仓库配置</p><h5 id="使用私服后仓库访问顺序"><a href="#使用私服后仓库访问顺序" class="headerlink" title="使用私服后仓库访问顺序"></a>使用私服后仓库访问顺序</h5><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180409/9c9JLIjDEA.png?imageslim" alt="mark"></p><h4 id="上传jar包配置"><a href="#上传jar包配置" class="headerlink" title="上传jar包配置"></a>上传jar包配置</h4><p>对于中央仓库没有的jar包，需要我们自己将jar包发布到私服中去，其中jar包主要分为两类，一类是本地自己开发供给项目组其余同事使用，这种直接配置项目的pom文件和maven的setting文件，之后deploy发布即可发布到，另一类是第三方jar包，可以直接使用web页面上传并设置对应GAV即可</p><h5 id="本地maaven开发的项目上传配置"><a href="#本地maaven开发的项目上传配置" class="headerlink" title="本地maaven开发的项目上传配置"></a>本地maaven开发的项目上传配置</h5><ol><li><p>maven的setting文件配置<br>这里要配置配置上传用户及仓库信息，我这里直接使用了admin用户，在nenus2.x中还内置了一个deployment/deployment123用户，在3.x该用户被移除了，这里可以自己配置角色和用户，我就直接使用admin用户了</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;servers&gt;</div><div class="line">  &lt;server&gt;</div><div class="line">    &lt;id&gt;nexus-releases&lt;/id&gt;</div><div class="line">    &lt;username&gt;admin&lt;/username&gt;</div><div class="line">    &lt;password&gt;admin123&lt;/password&gt;</div><div class="line">  &lt;/server&gt;</div><div class="line">  &lt;server&gt;</div><div class="line">    &lt;id&gt;nexus-snapshots&lt;/id&gt;</div><div class="line">    &lt;username&gt;admin&lt;/username&gt;</div><div class="line">    &lt;password&gt;admin123&lt;/password&gt;</div><div class="line">  &lt;/server&gt;</div><div class="line">&lt;/servers&gt;</div></pre></td></tr></table></figure></li><li><p>项目中的pom文件配置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;distributionManagement&gt;</div><div class="line">&lt;repository&gt;</div><div class="line">&lt;id&gt;nexus-releases&lt;/id&gt;</div><div class="line">&lt;name&gt;Nexus Release Repository&lt;/name&gt;</div><div class="line">&lt;url&gt;http://192.168.16.30:8081/repository/maven-releases/&lt;/url&gt;</div><div class="line">&lt;/repository&gt;</div><div class="line">&lt;snapshotRepository&gt;</div><div class="line">&lt;id&gt;nexus-snapshots&lt;/id&gt;</div><div class="line">&lt;name&gt;Nexus Snapshot Repository&lt;/name&gt;</div><div class="line">&lt;url&gt;http://192.168.16.30:8081/repository/maven-snapshots/&lt;/url&gt;</div><div class="line">&lt;/snapshotRepository&gt;</div><div class="line">&lt;/distributionManagement&gt;</div></pre></td></tr></table></figure></li><li><p>执行maven的deploy命令  </p><p> 这是myeclipse中上传本地项目jar到私服，IDEA中更为简单直接点击maven周期中的deploy即可</p><p> <img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180409/227fm3K96F.png?imageslim" alt="mark"></p><p> 出现uploading信息并且没报错说明上传成功</p><p> <img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180409/75G941HeaG.png?imageslim" alt="mark"></p><p> 到对应仓库查看  </p><p> <img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180409/Ha9Ka34ima.png?imageslim" alt="mark"></p></li></ol><p>注意:</p><ol><li><p>这里只有Snapshot的仓库上传成功，Release仓库并没有上传成功，这是因为版本号名称结尾有SNAPSHOT，默认以这个结尾是不会上传到Release仓库去的，去除就会上传到Release仓库且不会上传到快照仓库</p></li><li><p>Release仓库默认不支持重复发布，<a href="###web界面">可配置</a></p></li><li><p>注意setting中server标签下的id要和pom文件中仓库配置的id相同，即指定上传到哪个仓库</p></li></ol><h5 id="第三方jar包上传"><a href="#第三方jar包上传" class="headerlink" title="第三方jar包上传"></a>第三方jar包上传</h5><p>对于第三方jar包的上传采用nenus提供的web界面上传，上传成功后需要使用该jar包的话，依赖中填写自定义的GAV即可  </p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180409/07kGHci8JG.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建maven私服主要是为了方便在一个团队中使用maven中央仓库没有的jar包，这些非中央仓库的jar包可能是自己团队开发的公共依赖jar包，可能是第三方私有的认证相关jar包，特殊的还有oracle的驱动jar包，下面是使用Nexus搭建maven私服及私服使用&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangshaoxiang.github.io/categories/java/"/>
    
    
      <category term="maven" scheme="https://yangshaoxiang.github.io/tags/maven/"/>
    
      <category term="环境搭建" scheme="https://yangshaoxiang.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>maven的依赖特性</title>
    <link href="https://yangshaoxiang.github.io/2017/04/11/maven%E7%9A%84%E4%BE%9D%E8%B5%96%E7%89%B9%E6%80%A7/"/>
    <id>https://yangshaoxiang.github.io/2017/04/11/maven的依赖特性/</id>
    <published>2017-04-10T17:05:08.000Z</published>
    <updated>2019-04-26T06:31:44.347Z</updated>
    
    <content type="html"><![CDATA[<p>maven的依赖特性很多很杂，这里大概总结一下，maven的依赖特性主要是依赖范围和传递依赖，前者会影响后者，这篇文章会介绍传递依赖的传递原则，出现冲突传递依赖默认如何处理，我们自己可以怎么处理等内容<br><a id="more"></a></p><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>依赖范围会影响传递性依赖，同时也会影响项目构建任务中使用的classpath。</p><p>Maven有以下6种依赖范围：</p><blockquote><p>compile<br>这是默认范围。如果没有指定，就会使用该依赖范围。编译依赖对项目所有的classpath都可用。此外，编译依赖会传递到依赖的项目。<br>provided<br>和compile范围很类似，但provided范围表明你希望由JDK或者某个容器提供运行时依赖。例如，当使用Java EE构建一个web应用时，你会设置对Servlet API和相关的Java EE APIs的依赖范围为provided，因为web容器提供了运行时的依赖。provided依赖只对编译和测试classpath有效，并且不能传递。<br>runtime<br>runtime范围表明编译时不需要依赖，而只在运行时依赖。此依赖范围对运行和测试classpath有效，对编译classpath无效。<br>test<br>test范围表明使用此依赖范围的依赖，只在编译测试代码和运行测试的时候需要，应用的正常运行不需要此类依赖。<br>system<br>系统范围与provided类似，不过你必须显式指定一个本地系统路径的JAR，此类依赖应该一直有效，Maven也不会去仓库中寻找它。</p></blockquote><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180410/FGA05Li7fk.png?imageslim" alt="mark"></p><h3 id="传递依赖"><a href="#传递依赖" class="headerlink" title="传递依赖"></a>传递依赖</h3><p>传递依赖基于要传递的依赖scope为compile,runtime，system的依赖范围，scope为test和provided不会传递依赖 ，此外传递性依赖的嵌套深度没有任何限制，只是在出现循环依赖时会报错。下图是传递依赖时的scope变化，第一列表示直接依赖，第一行表示间接依赖的Scope</p><blockquote><p>举例说明:<br>A–&gt;B–&gt;C。当前项目为A，A依赖于B，B依赖于C。知道B在A项目中的scope，那么怎么知道C在A中的scope呢？<br>答案是：<br>当C是test或者provided时，C直接被丢弃，A不依赖C；<br>否则A依赖C，C的scope继承于B的scope。</p></blockquote><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180410/d9Bicab8KG.png?imageslim" alt="mark"></p><h4 id="基本传递依赖"><a href="#基本传递依赖" class="headerlink" title="基本传递依赖"></a>基本传递依赖</h4><p>传递依赖指的是A依赖B，B依赖C，D，F等，那么A也同时依赖C,D,F</p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180410/JDKb625jg1.png?imageslim" alt="mark"></p><h4 id="传递依赖冲突-依赖调解"><a href="#传递依赖冲突-依赖调解" class="headerlink" title="传递依赖冲突-依赖调解"></a>传递依赖冲突-依赖调解</h4><p> 当项目中出现多个版本构件依赖的情形，依赖调解决定最终应该使用哪个版本，主要依赖于两个原则(注意优先第一个原则，两个原则有优先级之分)，这是maven自动进行的</p><ol><li><p>短路径优先原则<br>A依赖B工程，B工程依赖C-1.jar,A工程依赖C-2.jar,那么A工程最终依赖的是C-2.jar，因为这条依赖链最短</p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180410/LA63FaJHAB.png?imageslim" alt="mark"></p></li><li><p>第一声明原则<br>A依赖B工程，B工程依赖S-1.jar,A工程依赖C工程，C工程依赖S-2.jar,那么A工程最终依赖的是S-1.jar，因为在依赖链长度相同时，A工程在pom文件中先声明依赖B工程，先声明指的是在A工程pom文件中的dependencies标签下，B工程的dependency写在C工程前面</p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180410/B5dKlIKlDj.png?imageslim" alt="mark"></p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180410/lDl5gF4eAg.png?imageslim" alt="mark"></p></li></ol><h4 id="exclusions元素排除依赖"><a href="#exclusions元素排除依赖" class="headerlink" title="exclusions元素排除依赖"></a>exclusions元素排除依赖</h4><p>当项目中某个传递依赖我们不需要时可以使用<exclusion>标签进行排除<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></exclusion></p><h4 id="可选依赖-Optional-Dependencies"><a href="#可选依赖-Optional-Dependencies" class="headerlink" title="可选依赖-Optional Dependencies"></a>可选依赖-Optional Dependencies</h4><p>当自己开发一个供别人使用的jar包，项目依赖于多个模块，完成不同功能，各个功能相互独立，那么当第三方使用我的jar包时可以排除他不需要的依赖功能jar包，保留其需要的，这需要”我”在pom中配置依赖的可选性<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>sample.ProjectB<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Project-B<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span> <span class="comment">&lt;!-- value will be true or false only --&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p><p>假设以上配置是项目A的配置，即：Project-A –&gt; Project-B。在编译项目A时，是可以正常通过的。<br>如果有一个新的项目X依赖A，即：Project-X -&gt; Project-A。此时项目X就不会依赖项目B了。如果项目X用到了涉及项目B的功能，那么就需要在pom.xml中重新配置对项目B的依赖。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/kimylrong/article/details/50353161" target="_blank" rel="external"> Maven依赖中的scope详解</a><br><a href="http://www.cnblogs.com/meet/p/6417496.html#wiz_toc_6" target="_blank" rel="external">Maven入门-4.Maven的依赖</a><br><a href="http://ifeve.com/maven-dependency-mechanism/" target="_blank" rel="external">《Maven官方文档》-Maven依赖机制简介</a><br><a href="https://blog.csdn.net/ado1986/article/details/39547839" target="_blank" rel="external">可选依赖及排除依赖</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;maven的依赖特性很多很杂，这里大概总结一下，maven的依赖特性主要是依赖范围和传递依赖，前者会影响后者，这篇文章会介绍传递依赖的传递原则，出现冲突传递依赖默认如何处理，我们自己可以怎么处理等内容&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangshaoxiang.github.io/categories/java/"/>
    
    
      <category term="maven" scheme="https://yangshaoxiang.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>mysql复制</title>
    <link href="https://yangshaoxiang.github.io/2017/04/03/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>https://yangshaoxiang.github.io/2017/04/03/mysql主从复制/</id>
    <published>2017-04-03T14:44:21.000Z</published>
    <updated>2019-04-26T06:31:44.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql主从复制"><a href="#mysql主从复制" class="headerlink" title="mysql主从复制"></a>mysql主从复制</h2><p>一般网站的业务都是读多写少，而一般并发系统的瓶颈在数据库，因此这种情况下一般会采用读写分离的方式降低主库的读压力，从而提升系统的并发量，现在先不说读写分离相关技术，就说要实现读写分离对数据库有一个基本要求，即主库和从库数据一致性的问题，即使不能绝对的强一致性，至少也要达到相对的一致性，这里依赖于mysql数据库自带的一些功能和配置<br><a id="more"></a></p><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p>图片是从网上找的一个较为形象的图片:</p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180402/iKLah5G0ak.png?imageslim" alt="mark"></p><h3 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h3><p>原理是使用binlog进行同步，binlog会记录数据库的写操作，将改变记录到binlog中，从库基本实时读取主库的binlog，然后在自身的数据库中执行这种改变。  </p><p>详细过程:  </p><ol><li><p>master将改变写到binlog文件中</p></li><li><p>启动salve，salve有一个IO(工作)线程链接master去获取改变</p></li><li><p>master启动一个Binglog Dump线程用来”接待”从库的IO线程，该线程是一个守护线程，他会读取binlog中的事件发送给IO线程，<code>注意这里如果是异步复制，那么主库并不会在这里等待而会直接给调用的client返回sql执行结果</code></p></li><li><p>IO线程将改变写到salve的relayBinlog中</p></li><li><p>salve有一个SQLThread线程读取relayBinlog文件，将写操作在salve数据库中执行，以达到数据同步的目的</p></li><li><p>(可选)savve也会操作写入salve的binlog文件，用途是供给salve的salve使用，当然也可以关闭</p></li></ol><p>补充:  </p><ol><li><p>binlog记录改变的方式有3种:  </p><p> 基于语句就是当数据库执行DML(insert/update/delete)语句时将语句记录到binlog中,效率较高  </p><p> 基于行就是当某行数据改变时将该行数据记录到binlog中，较为精确  </p><p> 混合就是两者混着用，优先使用基于语句，无法保证精确复制时使用基于行  </p><p> 优劣分析可参考<a href="(https://blog.csdn.net/thundermeng/article/details/50401150">binlog分析</a>)</p></li><li><p>详细过程3中后续的过程  </p><p> 之后若主库无改变，dmup线程则进入休眠，直到主库改变binlog发送广播时会唤醒该线程，因此有几个salve链接master，那么master上就会启动几个dump线程，当该线程负责接待的salve断掉连接时，理论上该线程会退出</p></li><li><p>还需要了解的binlog知识  </p><p> binlog的position:解决从哪开始同步，该属性代表同步位置，不可能每次全量同步，肯定是增量同步</p><p> 可以在my.cnf配置哪些库需要同步，哪些库不需要</p><p> binlog不会让他无限去膨胀记录的，可以设置有效期和大小</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  #my.cnf中有两个参数设置</div><div class="line">expire_logs_days = 7      #binlog保留时间7天</div><div class="line">max_binlog_size = 1G      #binlog大小</div></pre></td></tr></table></figure></li><li><p>两个命令</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#查看当前正在写入的binlog文件</div><div class="line">show master  status;</div><div class="line"></div><div class="line">#查看binlog中的事件</div><div class="line">show binlog events in &quot;mysql-bin.000007&quot;;</div></pre></td></tr></table></figure></li></ol><h3 id="常见复制架构分析"><a href="#常见复制架构分析" class="headerlink" title="常见复制架构分析"></a>常见复制架构分析</h3><p>一主一从：一般网站是用来做热备，但是程序员手抖，删除主库，从库还是会在几秒内删除，不靠谱，建议定时任务  </p><p>一主三从：其中一个从库是太子(半同步)，盖架构一般用来做读写分离，解决主库读压力  </p><p>双主：不推荐使用，只有大量写去使用(135写1库，246写2库)</p><p>级联同步:减轻master的压力，同时达到主从同步目的,缺点是复制master的那个salve挂了，架构就崩了，即存在单点问题</p><p>环形多主：极不推荐，除非是实在解决不了写并发</p><h3 id="一主多从搭建"><a href="#一主多从搭建" class="headerlink" title="一主多从搭建"></a>一主多从搭建</h3><p>配置主从复制很简单，我这里linux环境是CentOS6.6,mysql5.6,按照如下步骤操作即可，代理节点先不管他，在使用atlas做读写分离时会配置使用</p><h4 id="环境安排"><a href="#环境安排" class="headerlink" title="环境安排"></a>环境安排</h4><p>首先要保证网络环境能相互ping通，对应的防火墙端口(3306)开放</p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180403/5GGbffAmdh.png?imageslim" alt="mark"></p><h4 id="安装mysql数据库"><a href="#安装mysql数据库" class="headerlink" title="安装mysql数据库"></a>安装mysql数据库</h4><p>首先要在两台服务器上安装好mysql数据库，我这里分别在192.168.16.10(主)，和192,168.16.20(从)上安装的mysql5.6的数据库，安装步骤可以参考我之前关于基本环境搭建的博客<a href="(https://yangshaoxiang.github.io/2017/12/24/linux%E4%B8%8BJavaWeb%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#more">web常用环境搭建</a>)</p><h4 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h4><p>编辑要设置为主库的数据库配置文件，添加如下内容即可，对应配置含义有注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/my.cnf</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#mysql主从复制-master配置</div><div class="line">#需要同步的二进制数据库名；</div><div class="line">binlog-do-db=syndb</div><div class="line">#不同步的二进制数据库名,如果不设置可以将其注释掉;</div><div class="line">binlog-ignore-db=information_schema</div><div class="line">binlog-ignore-db=mysql</div><div class="line">binlog-ignore-db=personalsite</div><div class="line">binlog-ignore-db=test</div><div class="line">#以下参数可选----------</div><div class="line">#binlog 格式</div><div class="line">binlog-format=ROW</div><div class="line">log-bin=mysql-master-bin</div><div class="line">#slave更新时是否记录到日志中；</div><div class="line">log-slave-updates=true</div></pre></td></tr></table></figure><p>从原理上来看，从库是需要连接主库的，因此主库要给从库分配一个用于访问的数据库的账号和密码，登入mysql使用以下命令是创建一个账号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#创建一个用户名为slave1密码为123456的账户，授予replication(复制)权限，且只允许该账户在ip地址192.168.16.20上使用</div><div class="line">grant replication slave,super,reload on *.* to slave1@192.168.16.20 identified by &apos;123456&apos;;</div></pre></td></tr></table></figure></p><h4 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h4><p>编辑要设置为从库的数据库配置文件，添加如下内容即可，对应配置含义有注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/my.cnf</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#mysql主从复制-slave配置</div><div class="line">server-id = 2 #原有的配置文件为1，修改为2</div><div class="line">#需要同步的二进制数据库名；</div><div class="line">replicate-do-db=syndb</div><div class="line">#忽略同步的数据库名称</div><div class="line">replicate-ignore-db=information_schema</div><div class="line">replicate-ignore-db=mysql</div><div class="line">replicate-ignore-db=personalsite</div><div class="line">replicate-ignore-db=test</div><div class="line">#日志名</div><div class="line">log-bin=mysql-slave-bin</div></pre></td></tr></table></figure><p>配置主库时主库为从库的链接提供了一个账号，配置从库使用该账户链接主库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">change master to master_host=&apos;192.168.16.10&apos;, master_user=&apos;slave1&apos;, master_password=&apos;123456&apos;;</div></pre></td></tr></table></figure></p><h4 id="开启主从复制及注意点"><a href="#开启主从复制及注意点" class="headerlink" title="开启主从复制及注意点"></a>开启主从复制及注意点</h4><ol><li><p>开始时从库不需要主动创建要同步的主库的库，否则从库SqlRunning无法启动，主从开启后从库会自动创建要同步的库</p></li><li><p>重启主库及从库 (也有别的方式，重启最直接和简单)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#前面文件目录可能略有不同，找到自己的，重启</div><div class="line">/etc/rc.d/init.d/mysqld restart</div></pre></td></tr></table></figure></li><li><p>开启从库，查看从库状态(此步完成，主从复制配置完成)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#启动slave</div><div class="line">mysql&gt;start slave;</div><div class="line"></div><div class="line">#查看从库状态，只有 Slave_IO_Running和Slave_SQL_Running都为Yes才可以</div><div class="line">mysql&gt;show slave status\G;</div></pre></td></tr></table></figure></li><li><p>主从复制常用命令</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#一些主库命令</div><div class="line">#查看当前正在写入的binlog文件</div><div class="line">mysql&gt; show master status</div><div class="line"></div><div class="line">#在主库上查看已连接的slave主机</div><div class="line">mysql&gt; show slave hosts;</div><div class="line"></div><div class="line">#查看所有binlog日志</div><div class="line">mysql&gt; show binary logs;</div><div class="line"></div><div class="line">#查看所有binlog 事件</div><div class="line">mysql&gt; show binlog events in &apos;mysql-bin.000003&apos; from 145 \G;</div><div class="line"></div><div class="line"></div><div class="line">#一些从库命令</div><div class="line">#跳过指定数量错误</div><div class="line">SET GLOBAL SQL_SLAVE_SKIP_COUNTER = 1;</div><div class="line"></div><div class="line">#查看 relaylog 事件</div><div class="line">show relaylog events in &apos;localhost-relay-bin.000019&apos;</div></pre></td></tr></table></figure></li></ol><h3 id="一主多从问题"><a href="#一主多从问题" class="headerlink" title="一主多从问题"></a>一主多从问题</h3><p>中间数据中断，数据不同步问题，或延时不同步(写完立刻要查)  </p><p><code>解决方案一</code>:<a href="#半同步">半同步</a>(下面有详细介绍半同步)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">                                 这里异步</div><div class="line">异步:   插入-&gt;master binlog（数据库）---&gt;salve  relayBinlog --&gt;binlog（数据库）</div><div class="line"></div><div class="line">                                 这里同步               这里异步</div><div class="line">半同步  插入-&gt;master binlog（数据库）---&gt;salve  relayBinlog --&gt;binlog（数据库）</div></pre></td></tr></table></figure></p><p>这种方案意思是至少保证一台salve接收到了数据（保证到达relayBinlog），之后才返回,<br>实际上这种方式很耗时，所以一主多从，如果采用半同步方式保证数据一致，只会有一台从库会做半同步,半同步的salve可以切换为master</p><p>缺点:salve挂掉，master会一直等待，可以设置超时时间1-10s之间，过了超时时间变为异步复制，看业务配置时间，配置上要安装一个插件并且5.1之后才支持</p><p><code>解决方案二</code>:并行复制（mysql5.7）<br>该方案我并未使用和配置过，只做过简单了解，可参考如下链接<br><a href="http://www.ttlsa.com/mysql/mysql-5-7-enhanced-multi-thread-salve/" target="_blank" rel="external">http://www.ttlsa.com/mysql/mysql-5-7-enhanced-multi-thread-salve/</a></p><p><code>解决方案2.5</code>:代理读主库<br>之所以是2.5是这并不是解决复制延时问题，而是向上一层考虑，为什么不能容忍延迟？一般是因为插入后要立刻读，有延迟从从库读取不到master新插入的数据，可以强制读主库，例如360atlas中查询sql语句加/<em>master</em>/前缀</p><h3 id="半同步"><a href="#半同步" class="headerlink" title="半同步"></a>半同步</h3><h4 id="半同步原理"><a href="#半同步原理" class="headerlink" title="半同步原理"></a>半同步原理</h4><p>在master的dump线程向slave的IO线程发送binlog时，会阻塞master的结果提交，直到slave将改变写入relayBinlog  (5.7之后可配置成阻塞事务提交)<br><a href="https://blog.csdn.net/thundermeng/article/details/50401150" target="_blank" rel="external">详细过程如下:</a></p><ol><li><p>当Slave主机连接到Master时，能够查看其是否处于半同步复制的机制。</p></li><li><p>当Master上开启半同步复制的功能时，至少应该有一个Slave开启其功能。此时，一个线程在Master上提交事务将受到阻塞，直到得知一个已开启半同步复制功能的Slave已收到此事务的所有事件，或等待超时。</p></li><li><p>当一个事务的事件都已写入其relay-log中且已刷新到磁盘上，Slave才会告知已收到。</p></li><li><p>如果等待超时，也就是Master没被告知已收到，此时Master会自动转换为异步复制的机制。当至少一个半同步的Slave赶上了，Master与其Slave自动转换为半同步复制的机制。</p></li><li><p>半同步复制的功能要在Master，Slave都开启，半同步复制才会起作用；否则，只开启一边，它依然为异步复制。</p></li></ol><h4 id="半同步配置"><a href="#半同步配置" class="headerlink" title="半同步配置"></a>半同步配置</h4><p>半同步需要满足一下几个条件<br>要想使用半同步复制，必须满足以下几个条件：</p><ol><li><p>MySQL 5.5及以上版本</p></li><li><p>变量have_dynamic_loading为YES</p></li><li><p>异步复制已经存在</p></li></ol><p>确认满足后按照如下步骤进行配置(最终无需重启mysql)</p><h5 id="主库配置"><a href="#主库配置" class="headerlink" title="主库配置"></a>主库配置</h5><ol><li><p>安装插件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#安装插件</div><div class="line">mysql&gt; INSTALL PLUGIN rpl_semi_sync_master SONAME&apos;semisync_master.so&apos;;</div><div class="line"></div><div class="line">#查看是否安装成功</div><div class="line">mysql&gt; select * from mysql.plugin;</div></pre></td></tr></table></figure></li><li><p>设置环境</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#开启半同步复制</div><div class="line">SET GLOBAL rpl_semi_sync_master_enabled = 1;</div><div class="line"></div><div class="line">#主节点等待备节点返回确认信息的超时时间单位毫秒，超过这个时间后半同步复制变为异步复制</div><div class="line">SET GLOBAL rpl_semi_sync_master_timeout = 5000;</div><div class="line"></div><div class="line">#查看是否启动(有一个on即可)</div><div class="line">show status like &apos;%semi_sync%&apos;;</div></pre></td></tr></table></figure></li><li><p>配置文件<br> 编辑mysql配置问价</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/my.cnf</div></pre></td></tr></table></figure><p> 在该文件中追加如下内容:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#半同步复制-master配置</div><div class="line"></div><div class="line">#开启半同步复制</div><div class="line">rpl_semi_sync_master_enabled=1</div><div class="line"></div><div class="line">#主节点等待备节点返回确认信息的超时时间单位毫秒，超过这个时间后半同步复制转变成异步复制</div><div class="line">rpl_semi_sync_master_timeout=5000</div></pre></td></tr></table></figure></li></ol><h5 id="从库配置"><a href="#从库配置" class="headerlink" title="从库配置"></a>从库配置</h5><ol><li><p>安装插件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#安装插件</div><div class="line">mysql&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME&apos;semisync_slave.so&apos;;</div><div class="line"></div><div class="line">#查看是否安装成功</div><div class="line">mysql&gt; select * from mysql.plugin;</div></pre></td></tr></table></figure></li><li><p>设置环境</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#开启半同步复制</div><div class="line">mysql&gt; SET GLOBAL rpl_semi_sync_slave_enabled = 1;</div><div class="line"></div><div class="line">#重启slave上的IO线程，重启后slave会在master上注册为半同步复制的slave角色</div><div class="line">mysql&gt; STOP SLAVE IO_THREAD; START SLAVE IO_THREAD;</div><div class="line"></div><div class="line">##查看是否启动(有一个on即可)</div><div class="line">mysql&gt;  show status like &apos;%semi_sync%&apos;;</div></pre></td></tr></table></figure></li><li><p>配置文件 (到此半同步配置完成，无需重启mysql)<br> 编辑mysql配置文价</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/my.cnf</div></pre></td></tr></table></figure><p> 在该文件中追加如下内容:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#半同步复制-slave配置</div><div class="line">#开启半同步复制</div><div class="line">rpl_semi_sync_master_enabled=1</div></pre></td></tr></table></figure></li></ol><h5 id="半同步测试"><a href="#半同步测试" class="headerlink" title="半同步测试"></a>半同步测试</h5><p>完成以上配置后在主库同步的数据库中删除一条数据，可以看到执行时间很短，只有0.009s，执行完毕后从库该条数据也已删除，说明主从复制模式没有问题</p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180403/aL9bJ1D0k2.png?imageslim" alt="mark"></p><p>关闭从库，在从库上执行  <code>stop slave;</code> ,然后再在主库删除一条数据，会发现执行时间为5.002s，这是主库在等待从库响应写入relay-log，等待了5s(我们配置的)，转为异步复制执行</p><p><img src="https://shaoxia-img-1256191696.cos.ap-chengdu.myqcloud.com/blog/180403/ge65jagK6e.png?imageslim" alt="mark"></p><p>由此实验基本证明半同步开启成功</p><h4 id="半同步问题"><a href="#半同步问题" class="headerlink" title="半同步问题"></a>半同步问题</h4><p>客户端事务在存储引擎层提交后，在得到从库确认的过程中，主库宕机了，此时，可能的情况有两种</p><p>1.事务还没发送到从库上</p><p>此时，客户端会收到事务提交失败的信息，客户端会重新提交该事务到新的主上，当宕机的主库重新启动后，以从库的身份重新加入到该主从结构中，会发现，该事务在从库中被提交了两次，一次是之前作为主的时候，一次是被新主同步过来的。</p><p>2.事务已经发送到从库上</p><p>此时，从库已经收到并应用了该事务，但是客户端仍然会收到事务提交失败的信息，重新提交该事务到新的主上。   </p><p><code>解决方案</code>：升级到mysql5.7<br>mysql5.7提供了新的半同步机制，即在主库提交事务到存储引擎层之前，阻塞，直到从库返回响应信息或超时</p><p><code>补充</code>: mysql5.7对复制的优化</p><ol><li><p>如上问题，mysql5.7对半同步提供了AFTER_SYNC模式解决after_commit导致的master crash主从间数据不一致问题</p></li><li><p>支持发送binlog和接受ack的异步化<br>5.6版本的半同步复制，dump thread 承担了两份不同且又十分频繁的任务：传送binlog 给slave ，还需要等待slave反馈信息，而且这两个任务是串行的，dump thread 必须等待 slave 返回之后才会传送下一个 events 事务。<br>5.7版本的半同步复制中，独立出一个 ack collector thread ，专门用于接收slave 的反馈信息。这样master 上有两个线程独立工作，可以同时发送binlog 到slave ，和接收slave的反馈。</p></li><li><p>Binlog 互斥锁改进<br>旧版本半同步复制在主提交binlog的写会话和dump thread读binlog的操作都会对binlog添加互斥锁，导致binlog文件的读写是串行化的，存在并发度的问题。<br>MySQL 5.7 对binlog lock进行了以下两方面优化: 1. 移除了dump thread对binlog的互斥锁 2. 加入了安全边际保证binlog的读安全</p></li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/thundermeng/article/details/50401150" target="_blank" rel="external"> MySQL传统复制与GTID复制原理及操作详解</a><br><a href="http://www.cnblogs.com/ivictor/p/5735580.html" target="_blank" rel="external">MySQL半同步复制</a><br><a href="https://blog.csdn.net/stevendbaguo/article/details/74330782" target="_blank" rel="external">MySQL5.6半同步复制配置及实验</a><br><a href="http://www.actionsky.com/mysql-57-semi-sync-intro/" target="_blank" rel="external">MySQL 5.7 深度解析: 半同步复制技术</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mysql主从复制&quot;&gt;&lt;a href=&quot;#mysql主从复制&quot; class=&quot;headerlink&quot; title=&quot;mysql主从复制&quot;&gt;&lt;/a&gt;mysql主从复制&lt;/h2&gt;&lt;p&gt;一般网站的业务都是读多写少，而一般并发系统的瓶颈在数据库，因此这种情况下一般会采用读写分离的方式降低主库的读压力，从而提升系统的并发量，现在先不说读写分离相关技术，就说要实现读写分离对数据库有一个基本要求，即主库和从库数据一致性的问题，即使不能绝对的强一致性，至少也要达到相对的一致性，这里依赖于mysql数据库自带的一些功能和配置&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://yangshaoxiang.github.io/categories/mysql/"/>
    
    
      <category term="环境搭建" scheme="https://yangshaoxiang.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
